{"version":3,"file":"lino-js.cjs.js","sources":["../src/transport/encoder.ts","../src/broadcast/index.ts","../node_modules/tslib/tslib.es6.js","../src/transport/jsonrpc2.ts","../src/transport/rpc.ts","../src/query/keys.ts","../src/transport/index.ts","../src/util/index.ts","../src/query/index.ts","../src/lino.ts","../src/common/index.ts"],"sourcesContent":["import ByteBuffer from 'bytebuffer';\nimport { encode } from 'punycode';\nimport shajs from 'sha.js';\nimport { Coin, SDKCoin } from '../common';\n\n// TODO: for int64, maybe we should do extra check in proper place, or use string\nexport interface StdFee {\n  amount: SDKCoin[];\n  gas: number;\n}\n\nexport interface StdSignature {\n  pub_key: InternalPubKey;\n  signature: InternalPrivKey;\n  account_number: number;\n  sequence: number;\n}\n\nexport interface StdMsg {\n  type: string;\n  value: string;\n}\n\nexport interface StdTx {\n  msg: StdMsg;\n  fee: StdFee;\n  signatures: StdSignature[];\n}\n\nexport interface StdSignMsg {\n  chain_id: string;\n  account_numbers: number[];\n  sequences: number[];\n  fee_bytes: string;\n  msg_bytes: string;\n  alt_bytes: any;\n}\n\nexport interface InternalPubKey {\n  type: string;\n  value: string;\n}\n\nexport interface InternalSignature {\n  type: string;\n  value: string;\n}\n\nexport interface InternalPrivKey {\n  type: string;\n  value: string;\n}\n\n// return a new zero fee object\nexport const getZeroFee: () => StdFee = () => ({\n  amount: [],\n  gas: 0\n});\n\nexport function encodeTx(\n  stdMsg: StdMsg,\n  rawPubKey: string,\n  rawSigDER: string,\n  seq: number\n): string {\n  const stdSig: StdSignature = {\n    pub_key: convertToInternalPubKey(rawPubKey, _TYPE.PubKeySecp256k1),\n    signature: convertToInternalSig(rawSigDER, _TYPE.SignatureKeySecp256k1),\n    account_number: 0,\n    sequence: seq\n  };\n\n  const stdTx: StdTx = {\n    msg: stdMsg,\n    signatures: [stdSig],\n    fee: getZeroFee()\n  };\n\n  const jsonStr = JSON.stringify(stdTx);\n  return ByteBuffer.btoa(jsonStr);\n}\n\nexport function encodeMsg(msg: any): any {\n  var encodedMsg = Object.assign({}, msg);\n  if ('new_master_public_key' in msg) {\n    encodedMsg.new_master_public_key = convertToInternalPubKey(\n      msg.new_master_public_key,\n      _TYPE.PubKeySecp256k1\n    );\n  }\n\n  if ('new_post_public_key' in msg) {\n    encodedMsg.new_post_public_key = convertToInternalPubKey(\n      msg.new_post_public_key,\n      _TYPE.PubKeySecp256k1\n    );\n  }\n\n  if ('new_transaction_public_key' in msg) {\n    encodedMsg.new_transaction_public_key = convertToInternalPubKey(\n      msg.new_transaction_public_key,\n      _TYPE.PubKeySecp256k1\n    );\n  }\n\n  if ('validator_public_key' in msg) {\n    encodedMsg.validator_public_key = convertToInternalPubKey(\n      msg.validator_public_key,\n      _TYPE.PubKeyEd25519\n    );\n  }\n\n  if ('new_micropayment_public_key' in msg) {\n    encodedMsg.new_micropayment_public_key = convertToInternalPubKey(\n      msg.new_micropayment_public_key,\n      _TYPE.PubKeySecp256k1\n    );\n  }\n\n  if ('public_key' in msg) {\n    encodedMsg.public_key = convertToInternalPubKey(msg.public_key, _TYPE.PubKeySecp256k1);\n  }\n\n  return encodedMsg;\n}\nexport function encodeSignMsg(stdMsg: StdMsg, chainId: string, seq: number): any {\n  const fee = getZeroFee();\n  const stdSignMsg: StdSignMsg = {\n    chain_id: chainId,\n    account_numbers: [],\n    sequences: [seq],\n    fee_bytes: ByteBuffer.btoa(JSON.stringify(fee)),\n    msg_bytes: ByteBuffer.btoa(JSON.stringify(stdMsg)),\n    alt_bytes: null\n  };\n\n  const jsonStr = JSON.stringify(stdSignMsg);\n  console.log('TX string: ', jsonStr);\n\n  const signMsgHash = shajs('sha256')\n    .update(jsonStr)\n    .digest();\n  return signMsgHash;\n}\n\nexport function convertMsg(msg: any): any {\n  var encodedMsg = Object.assign({}, msg);\n  if ('new_master_public_key' in msg) {\n    var buffer = ByteBuffer.fromHex(msg.new_master_public_key);\n    encodedMsg.new_master_public_key = getByteArray(buffer);\n  }\n\n  if ('new_post_public_key' in msg) {\n    var buffer = ByteBuffer.fromHex(msg.new_post_public_key);\n    encodedMsg.new_post_public_key = getByteArray(buffer);\n  }\n\n  if ('new_transaction_public_key' in msg) {\n    var buffer = ByteBuffer.fromHex(msg.new_transaction_public_key);\n    encodedMsg.new_transaction_public_key = getByteArray(buffer);\n  }\n\n  if ('validator_public_key' in msg) {\n    var buffer = ByteBuffer.fromHex(msg.validator_public_key);\n    encodedMsg.validator_public_key = getByteArray(buffer);\n  }\n\n  if ('new_micropayment_public_key' in msg) {\n    var buffer = ByteBuffer.fromHex(msg.new_micropayment_public_key);\n    encodedMsg.new_micropayment_public_key = getByteArray(buffer);\n  }\n\n  return encodedMsg;\n}\n\nfunction getByteArray(buffer: ByteBuffer): number[] {\n  let res: number[] = [];\n  for (var i = 0; i < buffer.limit; ++i) {\n    res.push(buffer.readUint8());\n  }\n  return res;\n}\n\n//decode std key to raw key, only support secp256k1 for now\nexport function decodePrivKey(privKeyHex: string): string {\n  privKeyHex = privKeyHex.toUpperCase();\n  if (privKeyHex.startsWith(_PREFIX.PrefixPrivKeySecp256k1)) {\n    return privKeyHex.slice(_PREFIX.PrefixPrivKeySecp256k1.length);\n  } else if (privKeyHex.startsWith(_PREFIX.PrefixPrivKeyEd25519)) {\n    return privKeyHex.slice(_PREFIX.PrefixPrivKeyEd25519.length);\n  }\n\n  throw new Error(`Decode priv key failed: ${privKeyHex}\\n`);\n}\n\nexport function decodePubKey(pubKeyHex: string): string {\n  pubKeyHex = pubKeyHex.toUpperCase();\n  if (pubKeyHex.startsWith(_PREFIX.PrefixPubKeySecp256k1)) {\n    return pubKeyHex.slice(_PREFIX.PrefixPubKeySecp256k1.length);\n  } else if (pubKeyHex.startsWith(_PREFIX.PrefixPubKeyEd25519)) {\n    return pubKeyHex.slice(_PREFIX.PrefixPubKeyEd25519.length);\n  }\n\n  throw new Error(`Decode pub key failed: ${pubKeyHex}\\n`);\n}\n\n//eoncde raw key to std key, only support secp256k1 for now\nexport function encodePrivKey(privKeyHex: string): string {\n  return _PREFIX.PrefixPrivKeySecp256k1.concat(privKeyHex).toUpperCase();\n}\n\nexport function encodePubKey(pubKeyHex: string): string {\n  return _PREFIX.PrefixPubKeySecp256k1.concat(pubKeyHex).toUpperCase();\n}\n\n// convert raw priv key to internal priv key format\nexport function convertToInternalPrivKey(rawPrivKey: string, type: string): InternalPrivKey {\n  const res: InternalPrivKey = {\n    type: type,\n    value: ByteBuffer.fromHex(rawPrivKey).toString('base64')\n  };\n  return res;\n}\n// convert raw pub key to internal pub key format\nexport function convertToInternalPubKey(rawPubKey: string, type: string): InternalPubKey {\n  const res: InternalPubKey = {\n    type: type,\n    value: ByteBuffer.fromHex(rawPubKey).toString('base64')\n  };\n  return res;\n}\n// convert raw sig to internal sig format\nexport function convertToInternalSig(rawSig: string, type: string): InternalSignature {\n  const res: InternalSignature = {\n    type: type,\n    value: ByteBuffer.fromHex(rawSig).toString('base64')\n  };\n  return res;\n}\n\n// convert internal priv key to raw priv key\nexport function convertToRawPrivKey(internalPrivKey: InternalPrivKey): string {\n  return ByteBuffer.fromBase64(internalPrivKey.value).toString('hex');\n}\n// convert internal pub key to raw pub key\nexport function convertToRawPubKey(internalPubKey: InternalPubKey): string {\n  return ByteBuffer.fromBase64(internalPubKey.value).toString('hex');\n}\n// convert internal sig to raw sig\nexport function convertToRawSig(internalSignature: InternalSignature): string {\n  return ByteBuffer.fromBase64(internalSignature.value).toString('hex');\n}\n\nconst _TYPE = {\n  PubKeyEd25519: 'AC26791624DE60',\n  PubKeySecp256k1: 'F8CCEAEB5AE980',\n\n  PrivKeyEd25519: '954568A3288910',\n  PrivKeySecp256k1: '019E82E1B0F798',\n\n  SignatureKeyEd25519: '6BF5903DA1DB28',\n  SignatureKeySecp256k1: '6D1EA416E1FEE8'\n};\n\nconst _PREFIX = {\n  PrefixPubKeyEd25519: '1624DE6220',\n  PrefixPubKeySecp256k1: 'EB5AE98221',\n\n  PrefixPrivKeyEd25519: 'A328891240',\n  PrefixPrivKeySecp256k1: 'E1B0F79A20'\n};\n","import * as Types from '../common';\nimport { ITransport } from '../transport';\nimport { decodePubKey } from '../transport/encoder';\nimport { ResultBroadcastTxCommit } from '../transport/rpc';\n\nconst InvalidSeqErrCode = 3;\n\nexport default class Broadcast {\n  private _transport: ITransport;\n\n  constructor(transport: ITransport) {\n    this._transport = transport;\n  }\n\n  //account related\n\n  /**\n   * Register registers a new user on blockchain.\n   * It composes RegisterMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param referrer: the user who refers the new user\n   * @param register_fee: the amount of money used for registering\n   * @param username: new username\n   * @param masterPubKeyHex: new user's master key\n   * @param transactionPubKeyHex: new user's transaction key\n   * @param micropaymentPubKeyHex: new user's micropayment key\n   * @param postPubKeyHex: new user's post key\n   * @param referrerPrivKeyHex: referrer's private key\n   * @param seq: the sequence number of referrer for the next transaction\n   */\n  register(\n    referrer: string,\n    register_fee: string,\n    username: string,\n    masterPubKeyHex: string,\n    transactionPubKeyHex: string,\n    micropaymentPubKeyHex: string,\n    postPubKeyHex: string,\n    referrerPrivKeyHex: string,\n    seq: number\n  ) {\n    const msg: RegisterMsg = {\n      referrer: referrer,\n      register_fee: register_fee,\n      new_username: username,\n      new_master_public_key: decodePubKey(masterPubKeyHex),\n      new_transaction_public_key: decodePubKey(transactionPubKeyHex),\n      new_micropayment_public_key: decodePubKey(micropaymentPubKeyHex),\n      new_post_public_key: decodePubKey(postPubKeyHex)\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.RegisterMsgType, referrerPrivKeyHex, seq);\n  }\n\n  /**\n   * Transfer sends a certain amount of LINO token from the sender to the receiver.\n   * It composes TransferMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param sender: the user who wants to send money\n   * @param receiver: the receiver whom the sender sends money to\n   * @param amount: the amount LINO token in the transfer\n   * @param memo: memos inthe transfer\n   * @param privKeyHex: the private key of sender\n   * @param seq: the sequence number of sender for the next transaction\n   */\n  transfer(\n    sender: string,\n    receiver: string,\n    amount: string,\n    memo: string,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: TransferMsg = {\n      sender,\n      receiver,\n      amount,\n      memo\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.TransferMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * Follow creates a social relationship between follower and followee.\n   * It composes FollowMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param follower: follower\n   * @param followee: followee\n   * @param privKeyHex: the private key of follower\n   * @param seq: the sequence number of follower for the next transaction\n   */\n  follow(follower: string, followee: string, privKeyHex: string, seq: number) {\n    const msg: FollowMsg = {\n      follower,\n      followee\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.FollowMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * Unfollow revokes the social relationship between follower and followee.\n   * It composes UnfollowMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param follower: follower\n   * @param followee: followee\n   * @param privKeyHex: the private key of follower\n   * @param seq: the sequence number of follower for the next transaction\n   */\n  unfollow(follower: string, followee: string, privKeyHex: string, seq: number) {\n    const msg: UnfollowMsg = {\n      follower,\n      followee\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.UnfollowMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * Claim claims rewards of a certain user.\n   * It composes ClaimMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who wants to claim reward\n   * @param privKeyHex: the private key of username\n   * @param seq: the sequence number of user for the next transaction\n   */\n  claim(username: string, privKeyHex: string, seq: number) {\n    const msg: ClaimMsg = {\n      username\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.ClaimMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * UpdateAccount updates account related info in jsonMeta which are not\n   * included in AccountInfo or AccountBank.\n   * It composes UpdateAccountMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who wants to update account meta\n   * @param json_meta: the newly updated meta\n   * @param privKeyHex: the private key of user\n   * @param seq: the sequence number of user for the next transaction\n   */\n  updateAccount(username: string, json_meta: string, privKeyHex: string, seq: number) {\n    const msg: UpdateAccountMsg = {\n      username,\n      json_meta\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.UpdateAccMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * Recover resets all keys of a user in case of losing or compromising.\n   * It composes RecoverMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who wants to recover account\n   * @param new_master_public_key: new master public key for user\n   * @param new_transaction_public_key: new transaction public key for user\n   * @param new_micropayment_public_key: new micropayment public key for user\n   * @param new_post_public_key: new post public key for user\n   * @param privKeyHex: the old private key of user\n   * @param seq: the sequence number of user for the next transaction\n   */\n  recover(\n    username: string,\n    new_master_public_key: string,\n    new_transaction_public_key: string,\n    new_micropayment_public_key: string,\n    new_post_public_key: string,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: RecoverMsg = {\n      username: username,\n      new_master_public_key: decodePubKey(new_master_public_key),\n      new_transaction_public_key: decodePubKey(new_transaction_public_key),\n      new_micropayment_public_key: decodePubKey(new_micropayment_public_key),\n      new_post_public_key: decodePubKey(new_post_public_key)\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.RecoverMsgType, privKeyHex, seq);\n  }\n\n  // post related\n\n  /**\n   * CreatePost creates a new post on blockchain.\n   * It composes CreatePostMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param author: the user who creates the new post\n   * @param postID: the post id of the new post\n   * @param title: the title of the new post\n   * @param content: the content of the new post\n   * @param parentAuthor: if this is a comment, parentAuthor is the author of post that this comment is added to\n   * @param parentPostID: if this is a comment, parentPostID is the id of post that this comment is added to\n   * @param sourceAuthor: if this is a re-post, sourceAuthor should be the original post author\n   * @param sourcePostID: if this is a re-post, sourcePostID should be the original post id\n   * @param redistributionSplitRate: how much percentage the source post wants to split for re-post\n   * @param links: the links of the new post\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of user for the next transaction\n   */\n  createPost(\n    author: string,\n    postID: string,\n    title: string,\n    content: string,\n    parentAuthor: string,\n    parentPostID: string,\n    sourceAuthor: string,\n    sourcePostID: string,\n    redistributionSplitRate: string,\n    links: Map<string, string>,\n    privKeyHex: string,\n    seq: number\n  ) {\n    let mLinks: Types.IDToURLMapping[] | null = null;\n    if (links != null) {\n      mLinks = [];\n      for (let entry of links.entries()) {\n        const mapping: Types.IDToURLMapping = {\n          identifier: entry[0],\n          url: entry[1]\n        };\n        mLinks.push(mapping);\n      }\n    }\n\n    const msg: CreatePostMsg = {\n      author: author,\n      post_id: postID,\n      title: title,\n      content: content,\n      parent_author: parentAuthor,\n      parent_postID: parentPostID,\n      source_author: sourceAuthor,\n      source_postID: sourcePostID,\n      links: mLinks,\n      redistribution_split_rate: redistributionSplitRate\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.CreatePostMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * Like adds a weighted-like to a post that is performed by a user.\n   * It composes LikeMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who likes the post\n   * @param author: the author of the post\n   * @param weight: like weight of the user\n   * @param post_id: the id of the post\n   * @param privKeyHex: the private key of user\n   * @param seq: the sequence number of user for the next transaction\n   */\n  like(\n    username: string,\n    author: string,\n    weight: number,\n    post_id: string,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: LikeMsg = {\n      username,\n      weight,\n      author,\n      post_id\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.LikeMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * Donate adds a money donation to a post by a user.\n   * It composes DonateMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who wants to donate to the post\n   * @param author: the author of the post\n   * @param amount: the amount LINO token that the user wants to donate\n   * @param post_id: the id of the post\n   * @param from_app: which app that the donation is from\n   * @param memo: memo of the donation\n   * @param is_micropayment: indicates if this is a micropayment\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of user for the next transaction\n   */\n  donate(\n    username: string,\n    author: string,\n    amount: string,\n    post_id: string,\n    from_app: string,\n    memo: string,\n    is_micropayment: boolean,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: DonateMsg = {\n      username,\n      amount,\n      author,\n      post_id,\n      from_app,\n      memo,\n      is_micropayment\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.DonateMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * ReportOrUpvote adds a report or upvote action to a post.\n   * It composes ReportOrUpvoteMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who report or upvote the post\n   * @param author: the author of the post\n   * @param post_id: the id of the post\n   * @param is_report: indicates this is a report if set to true\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the user for the next transaction\n   */\n  reportOrUpvote(\n    username: string,\n    author: string,\n    post_id: string,\n    is_report: boolean,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ReportOrUpvoteMsg = {\n      username,\n      author,\n      post_id,\n      is_report\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.ReportOrUpvoteMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * DeletePost deletes a post from the blockchain. It doesn't actually\n   * remove the post from the blockchain, instead it sets IsDeleted to true\n   * and clears all the other data.\n   * It composes DeletePostMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param author: the author of the post\n   * @param post_id: the id of the post\n   * @param privKeyHex: the private key of the author\n   * @param seq: the sequence number of the author for the next transaction\n   */\n  deletePost(author: string, post_id: string, privKeyHex: string, seq: number) {\n    const msg: DeletePostMsg = {\n      author,\n      post_id\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.DeletePostMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * View increases the view count of a post by one.\n   * It composes ViewMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who view the post\n   * @param author: The author of the post\n   * @param post_id: the id of the post\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the author for the next transaction\n   */\n  view(username: string, author: string, post_id: string, privKeyHex: string, seq: number) {\n    const msg: ViewMsg = {\n      username,\n      author,\n      post_id\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.ViewMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * UpdatePost updates post info with new data.\n   * It composes UpdatePostMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param author: the author of the post\n   * @param title: new titile of the post\n   * @param post_id: the id of the post\n   * @param content: new content of the post\n   * @param redistribution_split_rate: new re-spot split rate\n   * @param links: new links of the post\n   * @param privKeyHex: the private key of the author\n   * @param seq: the sequence number of the author for the next transaction\n   */\n  updatePost(\n    author: string,\n    title: string,\n    post_id: string,\n    content: string,\n    redistribution_split_rate: string,\n    links: Map<string, string>,\n    privKeyHex: string,\n    seq: number\n  ) {\n    let mLinks: Types.IDToURLMapping[] | null = null;\n    if (links != null) {\n      mLinks = [];\n      for (let entry of links.entries()) {\n        const mapping: Types.IDToURLMapping = {\n          identifier: entry[0],\n          url: entry[1]\n        };\n        mLinks.push(mapping);\n      }\n    }\n\n    const msg: UpdatePostMsg = {\n      author: author,\n      post_id: post_id,\n      title: title,\n      content: content,\n      links: mLinks,\n      redistribution_split_rate: redistribution_split_rate\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.UpdatePostMsgType, privKeyHex, seq);\n  }\n\n  // validator related\n\n  /**\n   * ValidatorDeposit deposits a certain amount of LINO token for a user\n   * in order to become a validator. Before becoming a validator, the user\n   * has to be a voter.\n   * It composes ValidatorDepositMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who wants to deposit money for being a validator\n   * @param deposit: the amount of LINO token the user wants to deposit\n   * @param validator_public_key: the validator public key given by Tendermint\n   * @param link: the link of the user\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the user for the next transaction\n   */\n  validatorDeposit(\n    username: string,\n    deposit: string,\n    validator_public_key: string,\n    link: string,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ValidatorDepositMsg = {\n      username: username,\n      deposit: deposit,\n      validator_public_key: decodePubKey(validator_public_key),\n      link: link\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.ValDepositMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * ValidatorWithdraw withdraws part of LINO token from a validator's deposit,\n   * while still keep being a validator.\n   * It composes ValidatorDepositMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the validator username\n   * @param amount: the amount of LINO token the validator wants to withdraw\n   * @param privKeyHex: the private key of the validator\n   * @param seq: the sequence number of the validator for the next transaction\n   */\n  validatorWithdraw(username: string, amount: string, privKeyHex: string, seq: number) {\n    const msg: ValidatorWithdrawMsg = {\n      username,\n      amount\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.ValWithdrawMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * ValidatorRevoke revokes all deposited LINO token of a validator\n   * so that the user will not be a validator anymore.\n   * It composes ValidatorRevokeMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the validator username\n   * @param privKeyHex: the private key of the validator\n   * @param seq: the sequence number of the validator\n   */\n  ValidatorRevoke(username: string, privKeyHex: string, seq: number) {\n    const msg: ValidatorRevokeMsg = {\n      username\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.ValRevokeMsgType, privKeyHex, seq);\n  }\n\n  // vote related\n\n  /**\n   * VoterDeposit deposits a certain amount of LINO token for a user\n   * in order to become a voter.\n   * It composes VoterDepositMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user whot wants to deposit money for being a voter\n   * @param deposit: the amount of LINO token the user wants to deposit\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the user for the next transaction\n   */\n  voterDeposit(username: string, deposit: string, privKeyHex: string, seq: number) {\n    const msg: VoterDepositMsg = {\n      username,\n      deposit\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.VoteDepositMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * VoterWithdraw withdraws part of LINO token from a voter's deposit,\n   * while still keep being a voter.\n   * It composes VoterWithdrawMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the voter username\n   * @param amount: the amount of LINO token the voter wants to withdraw\n   * @param privKeyHex: the private key of the voter\n   * @param seq: the sequence number of the voter for the next transaction\n   */\n  voterWithdraw(username: string, amount: string, privKeyHex: string, seq: number) {\n    const msg: VoterWithdrawMsg = {\n      username,\n      amount\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.VoteWithdrawMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * VoterRevoke reovkes all deposited LINO token of a voter\n   * so the user will not be a voter anymore.\n   * It composes VoterRevokeMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the voter username\n   * @param privKeyHex: the private key of the voter\n   * @param seq: the sequence number of the voter for the next transaction\n   */\n  voterRevoke(username: string, privKeyHex: string, seq: number) {\n    const msg: VoterRevokeMsg = {\n      username\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.VoteRevokeMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * Delegate delegates a certain amount of LINO token of delegator to a voter, so\n   * the voter will have more voting power.\n   * It composes DelegateMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param delegator: the user who wants to delegate money\n   * @param voter: the voter that the delegator wants to delegate moeny to\n   * @param amount: the amount of LINO token that the delegator wants to delegate\n   * @param privKeyHex: the private key of the delegator\n   * @param seq: the sequence number of the delegator for the next transaction\n   */\n  delegate(delegator: string, voter: string, amount: string, privKeyHex: string, seq: number) {\n    const msg: DelegateMsg = {\n      delegator,\n      voter,\n      amount\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.DelegateMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * DelegatorWithdraw withdraws part of delegated LINO token of a delegator\n   * to a voter, while the delegation still exists.\n   * It composes DelegatorWithdrawMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param delegator: the delegator username\n   * @param voter: the voter username\n   * @param amount: the amount of money that the delegator wants to withdraw\n   * @param privKeyHex: the private key of the delegator\n   * @param seq: the sequence number of the delegator for the next transaction\n   */\n  delegatorWithdraw(\n    delegator: string,\n    voter: string,\n    amount: string,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: DelegatorWithdrawMsg = {\n      delegator,\n      voter,\n      amount\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.DelegateWithdrawMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * RevokeDelegation reovkes all delegated LINO token of a delegator to a voter\n   * so there is no delegation between the two users.\n   * It composes RevokeDelegationMsg and then broadcasts the transaction to blockchain    *\n   *\n   * @param delegator: the delegator username\n   * @param voter: the voter username\n   * @param privKeyHex: the private key of the delegator\n   * @param seq: the sequence number of the delegator for the next transaction\n   */\n  revokeDelegation(delegator: string, voter: string, privKeyHex: string, seq: number) {\n    const msg: RevokeDelegationMsg = {\n      delegator,\n      voter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.DelegateRevokeMsgType, privKeyHex, seq);\n  }\n\n  // developer related\n\n  /**\n   * DeveloperRegsiter registers a developer with a certain amount of LINO token on blockchain.\n   * It composes DeveloperRegisterMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who wants to become a developer\n   * @param deposit: the amount of money the user wants to deposit\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the user for the next transaction\n   */\n  developerRegister(\n    username: string,\n    deposit: string,\n    website: string,\n    description: string,\n    app_meta_data: string,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: DeveloperRegisterMsg = {\n      username,\n      deposit,\n      website,\n      description,\n      app_meta_data\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.DevRegisterMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * DeveloperRevoke reovkes all deposited LINO token of a developer\n   * so the user will not be a developer anymore.\n   * It composes DeveloperRevokeMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the developer username\n   * @param privKeyHex: the private key of the developer\n   * @param seq: the sequence number of the developer for the next transaction\n   */\n  developerRevoke(username: string, privKeyHex: string, seq: number) {\n    const msg: DeveloperRevokeMsg = {\n      username\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.DevRevokeMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * GrantPermission grants a certain (e.g. Post or Micropayment) permission to\n   * an authenticated app with a certain period of time.\n   * It composes GrantPermissionMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who grants the permission\n   * @param authenticate_app: the authenticated app of the developer\n   * @param validity_period: how long does this app is valid\n   * @param grant_level: the permission level granted\n   * @param times: how many times the app is allowed to use with user's permission\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the user for the next transaction\n   */\n  grantPermission(\n    username: string,\n    authenticate_app: string,\n    validity_period: number,\n    grant_level: number,\n    times: number,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: GrantPermissionMsg = {\n      username,\n      authenticate_app,\n      validity_period,\n      grant_level,\n      times\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.GrantPermissionMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * RevokePermission revokes the permission given previously to a app.\n   * It composes RevokePermissionMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the user who wants to revoke permission\n   * @param public_key: the user's public key that will be revoked\n   * @param grant_level: the permission level granted\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the user for the next transaction\n   */\n  revokePermission(\n    username: string,\n    public_key: string,\n    grant_level: number,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: RevokePermissionMsg = {\n      username: username,\n      public_key: decodePubKey(public_key),\n      grant_level: grant_level\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.RevokePermissionMsgType, privKeyHex, seq);\n  }\n\n  // infra related\n\n  /**\n   * ProviderReport reports infra usage of a infra provider in order to get infra inflation.\n   * It composes ProviderReportMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param username: the username of the infra provider\n   * @param usage: the amount of data traffic consumed\n   * @param privKeyHex: the private key of the user\n   * @param seq: the sequence number of the user for the next transaction\n   */\n  providerReport(username: string, usage: number, privKeyHex: string, seq: number) {\n    const msg: ProviderReportMsg = {\n      username,\n      usage\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ProviderReportMsgType, privKeyHex, seq);\n  }\n\n  // proposal related\n  /**\n   * VoteProposal adds a vote to a certain proposal with agree/disagree.\n   * It composes VoteProposalMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param voter: the voter username\n   * @param proposal_id: the proposal id\n   * @param result: agree or disagree\n   * @param privKeyHex: the private key of the voter\n   * @param seq: the sequence number of the voter for the next transaction\n   */\n  voteProposal(\n    voter: string,\n    proposal_id: string,\n    result: boolean,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: VoteProposalMsg = {\n      voter,\n      proposal_id,\n      result\n    };\n    return this._broadcastTransaction(msg, _MSGTYPE.VoteProposalMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * ChangeGlobalAllocationParam changes GlobalAllocationParam with new value.\n   * It composes ChangeGlobalAllocationParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the GlobalAllocationParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeGlobalAllocationParam(\n    creator: string,\n    parameter: Types.GlobalAllocationParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeGlobalAllocationParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeGlobalAllocationMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeEvaluateOfContentValueParam changes EvaluateOfContentValueParam with new value.\n   * It composes ChangeEvaluateOfContentValueParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the EvaluateOfContentValueParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeEvaluateOfContentValueParam(\n    creator: string,\n    parameter: Types.EvaluateOfContentValueParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeEvaluateOfContentValueParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeEvaluationMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeInfraInternalAllocationParam changes InfraInternalAllocationParam with new value.\n   * It composes ChangeInfraInternalAllocationParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the InfraInternalAllocationParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeInfraInternalAllocationParam(\n    creator: string,\n    parameter: Types.InfraInternalAllocationParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeInfraInternalAllocationParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeInfraAllocationMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeVoteParam changes VoteParam with new value.\n   * It composes ChangeVoteParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the VoteParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeVoteParam(creator: string, parameter: Types.VoteParam, privKeyHex: string, seq: number) {\n    const msg: ChangeVoteParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeVoteParamMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeProposalParam changes ProposalParam with new value.\n   * It composes ChangeProposalParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the ProposalParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeProposalParam(\n    creator: string,\n    parameter: Types.ProposalParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeProposalParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeProposalParamMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeDeveloperParam changes DeveloperParam with new value.\n   * It composes ChangeDeveloperParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the DeveloperParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeDeveloperParam(\n    creator: string,\n    parameter: Types.DeveloperParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeDeveloperParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeDeveloperParamMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeValidatorParam changes ValidatorParam with new value.\n   * It composes ChangeValidatorParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the ValidatorParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeValidatorParam(\n    creator: string,\n    parameter: Types.ValidatorParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeValidatorParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeValidatorParamMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeBandwidthParam changes BandwidthParam with new value.\n   * It composes ChangeBandwidthParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the BandwidthParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeBandwidthParam(\n    creator: string,\n    parameter: Types.BandwidthParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeBandwidthParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeBandwidthParamMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changeAccountParam changes AccountParam with new value.\n   * It composes ChangeAccountParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the AccountParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changeAccountParam(\n    creator: string,\n    parameter: Types.AccountParam,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const msg: ChangeAccountParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangeAccountParamMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * changePostParam changes PostParam with new value.\n   * It composes ChangePostParamMsg and then broadcasts the transaction to blockchain.\n   *\n   * @param creator: the user who creates the proposal\n   * @param parameter: the PostParam\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  changePostParam(creator: string, parameter: Types.PostParam, privKeyHex: string, seq: number) {\n    const msg: ChangePostParamMsg = {\n      creator,\n      parameter\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.ChangePostParamMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * DeletePostContent deletes the content of a post on blockchain, which is used\n   * for content censorship.\n   * It composes DeletePostContentMsg and then broadcasts the transaction to blockchain.\n   * @param creator: the user who creates the proposal\n   * @param postAuthor: the author of the post\n   * @param postID: the id of the post\n   * @param reason: the reason why to delete post content\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  deletePostContent(\n    creator: string,\n    postAuthor: string,\n    postID: string,\n    reason: string,\n    privKeyHex: string,\n    seq: number\n  ) {\n    const permlink = postAuthor.concat('#').concat(postID);\n    const msg: DeletePostContentMsg = {\n      creator,\n      permlink,\n      reason\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.DeletePostContentMsgType, privKeyHex, seq);\n  }\n\n  /**\n   * UpgradeProtocol upgrades the protocol.\n   * It composes UpgradeProtocolMsg and then broadcasts the transaction to blockchain.\n   * @param creator: the user who creates the proposal\n   * @param link: the link of the upgraded protocol\n   * @param privKeyHex: the private key of the creator\n   * @param seq: the sequence number of the creator for the next transaction\n   */\n  upgradeProtocol(creator: string, link: string, privKeyHex: string, seq: number) {\n    const msg: UpgradeProtocolMsg = {\n      creator,\n      link\n    };\n\n    return this._broadcastTransaction(msg, _MSGTYPE.UpgradeProtocolMsgType, privKeyHex, seq);\n  }\n  _broadcastTransaction(\n    msg: object,\n    msgType: string,\n    privKeyHex: string,\n    seq: number\n  ): Promise<ResultBroadcastTxCommit> {\n    return this._transport.signBuildBroadcast(msg, msgType, privKeyHex, seq);\n  }\n}\n\n// Account related messages\nexport interface RegisterMsg {\n  referrer: string;\n  register_fee: string;\n  new_username: string;\n  new_master_public_key: string;\n  new_transaction_public_key: string;\n  new_micropayment_public_key: string;\n  new_post_public_key: string;\n}\n\nexport interface TransferMsg {\n  sender: string;\n  receiver: string;\n  amount: string;\n  memo: string;\n}\n\nexport interface FollowMsg {\n  follower: string;\n  followee: string;\n}\n\nexport interface UnfollowMsg {\n  follower: string;\n  followee: string;\n}\n\nexport interface ClaimMsg {\n  username: string;\n}\n\nexport interface RecoverMsg {\n  username: string;\n  new_master_public_key: string;\n  new_transaction_public_key: string;\n  new_micropayment_public_key: string;\n  new_post_public_key: string;\n}\n\nexport interface UpdateAccountMsg {\n  username: string;\n  json_meta: string;\n}\n\n// post related messages\nexport interface CreatePostMsg {\n  author: string;\n  post_id: string;\n  title: string;\n  content: string;\n  parent_author: string;\n  parent_postID: string;\n  source_author: string;\n  source_postID: string;\n  links: Types.IDToURLMapping[] | null;\n  redistribution_split_rate: string;\n}\n\nexport interface LikeMsg {\n  username: string;\n  weight: number;\n  author: string;\n  post_id: string;\n}\n\nexport interface DonateMsg {\n  username: string;\n  amount: string;\n  author: string;\n  post_id: string;\n  from_app: string;\n  memo: string;\n  is_micropayment: boolean;\n}\n\nexport interface ReportOrUpvoteMsg {\n  username: string;\n  author: string;\n  post_id: string;\n  is_report: boolean;\n}\n\nexport interface DeletePostMsg {\n  author: string;\n  post_id: string;\n}\n\nexport interface ViewMsg {\n  username: string;\n  author: string;\n  post_id: string;\n}\n\nexport interface UpdatePostMsg {\n  author: string;\n  post_id: string;\n  title: string;\n  content: string;\n  links: Types.IDToURLMapping[] | null;\n  redistribution_split_rate: string;\n}\n\n// validator related messages\nexport interface ValidatorDepositMsg {\n  username: string;\n  deposit: string;\n  validator_public_key: string;\n  link: string;\n}\n\nexport interface ValidatorWithdrawMsg {\n  username: string;\n  amount: string;\n}\n\nexport interface ValidatorRevokeMsg {\n  username: string;\n}\n\n// vote related messages\nexport interface VoterDepositMsg {\n  username: string;\n  deposit: string;\n}\n\nexport interface VoterWithdrawMsg {\n  username: string;\n  amount: string;\n}\n\nexport interface VoterRevokeMsg {\n  username: string;\n}\n\nexport interface DelegateMsg {\n  delegator: string;\n  voter: string;\n  amount: string;\n}\n\nexport interface DelegatorWithdrawMsg {\n  delegator: string;\n  voter: string;\n  amount: string;\n}\n\nexport interface RevokeDelegationMsg {\n  delegator: string;\n  voter: string;\n}\n\n// developer related messages\nexport interface DeveloperRegisterMsg {\n  username: string;\n  deposit: string;\n  website: string;\n  description: string;\n  app_meta_data: string;\n}\n\nexport interface DeveloperRevokeMsg {\n  username: string;\n}\n\nexport interface GrantPermissionMsg {\n  username: string;\n  authenticate_app: string;\n  validity_period: number;\n  grant_level: number;\n  times: number;\n}\n\nexport interface RevokePermissionMsg {\n  username: string;\n  public_key: string;\n  grant_level: number;\n}\n\n// infra related messages\nexport interface ProviderReportMsg {\n  username: string;\n  usage: number;\n}\n\n// proposal related messages\nexport interface DeletePostContentMsg {\n  creator: string;\n  permlink: string;\n  reason: string;\n}\n\nexport interface VoteProposalMsg {\n  voter: string;\n  proposal_id: string;\n  result: boolean;\n}\n\nexport interface UpgradeProtocolMsg {\n  creator: string;\n  link: string;\n}\n\nexport interface ChangeGlobalAllocationParamMsg {\n  creator: string;\n  parameter: Types.GlobalAllocationParam;\n}\n\nexport interface ChangeEvaluateOfContentValueParamMsg {\n  creator: string;\n  parameter: Types.EvaluateOfContentValueParam;\n}\n\nexport interface ChangeInfraInternalAllocationParamMsg {\n  creator: string;\n  parameter: Types.InfraInternalAllocationParam;\n}\n\nexport interface ChangeVoteParamMsg {\n  creator: string;\n  parameter: Types.VoteParam;\n}\n\nexport interface ChangeProposalParamMsg {\n  creator: string;\n  parameter: Types.ProposalParam;\n}\n\nexport interface ChangeDeveloperParamMsg {\n  creator: string;\n  parameter: Types.DeveloperParam;\n}\n\nexport interface ChangeValidatorParamMsg {\n  creator: string;\n  parameter: Types.ValidatorParam;\n}\n\nexport interface ChangeBandwidthParamMsg {\n  creator: string;\n  parameter: Types.BandwidthParam;\n}\n\nexport interface ChangeAccountParamMsg {\n  creator: string;\n  parameter: Types.AccountParam;\n}\n\nexport interface ChangePostParamMsg {\n  creator: string;\n  parameter: Types.PostParam;\n}\n\nconst _MSGTYPE = {\n  RegisterMsgType: '26DC9A48ED0600',\n  FollowMsgType: '65AF26BE5D3F10',\n  UnfollowMsgType: '9F04229AEA85D0',\n  TransferMsgType: '11D7DAB23CF4A8',\n  ClaimMsgType: 'E43B69C1242DD0',\n  RecoverMsgType: 'D8D1DD8D6DB638',\n  UpdateAccMsgType: '192B669B73B200',\n  DevRegisterMsgType: '488B85517B6738',\n  DevRevokeMsgType: 'B026042592D150',\n  GrantPermissionMsgType: 'B04543BA3A3848',\n  RevokePermissionMsgType: '5049F8880933C0',\n  CreatePostMsgType: '7984D42EEAC938',\n  UpdatePostMsgType: 'F93EAFE05DF8C0',\n  DeletePostMsgType: '056DC956AF53F8',\n  LikeMsgType: '2E9853FBC76B08',\n  DonateMsgType: '0371D9D8F05838',\n  ViewMsgType: '8ED05B78979A40',\n  ReportOrUpvoteMsgType: 'DD37A36073BE20',\n  VoteDepositMsgType: '9E3BB59C845D58',\n  VoteRevokeMsgType: '5D06CAFB44F630',\n  VoteWithdrawMsgType: '56190993CE3378',\n  DelegateMsgType: 'E7EF5D457166A0',\n  DelegateWithdrawMsgType: 'B90BE271224BE8',\n  DelegateRevokeMsgType: '85AB3EB261DF80',\n  ValDepositMsgType: 'DD1A6F7DB18808',\n  ValWithdrawMsgType: 'FCF3D85CFC69F0',\n  ValRevokeMsgType: '027606935C70E0',\n  VoteProposalMsgType: '9914E2FD1D1800',\n  DeletePostContentMsgType: '80612B567A8F98',\n  UpgradeProtocolMsgType: '8B53D94BF77490',\n  ChangeGlobalAllocationMsgType: 'FC2A866293F188',\n  ChangeEvaluationMsgType: '288E22F5EC6268',\n  ChangeInfraAllocationMsgType: '4F6C325C2ACA58',\n  ChangeVoteParamMsgType: 'BB11A22EFA6098',\n  ChangeProposalParamMsgType: '49AB71A6D3CB78',\n  ChangeDeveloperParamMsgType: '5BBFF6FE8C9110',\n  ChangeValidatorParamMsgType: '28FAB3D4621AD0',\n  ChangeBandwidthParamMsgType: '1F779099D3A7A0',\n  ChangeAccountParamMsgType: 'B4E93F3241E950',\n  ChangePostParamMsgType: 'D294B618DB0588',\n  ProviderReportMsgType: '6090FEC9F690B8',\n  EventRewardMsgType: 'A34081928A6048',\n  EventReturnMsgType: 'F37028A132AD10',\n  EventCpeMsgType: '51F05B75A00E98',\n  EventDpeMsgType: '90647BC86FCAC8'\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/** A String specifying the version of the JSON-RPC protocol. MUST be exactly \"2.0\". */\nexport type JsonRpcVersion = '2.0';\n\n/** Method names that begin with the word rpc followed by a period character\n * (U+002E or ASCII 46) are reserved for rpc-internal methods and extensions\n *  and MUST NOT be used for anything else. */\nexport type JsonRpcReservedMethod = string;\n\n/** An identifier established by the Client that MUST contain a String, Number,\n *  or NULL value if included. If it is not included it is assumed to be a\n *  notification. The value SHOULD normally not be Null and Numbers SHOULD\n *  NOT contain fractional parts [2] */\nexport type JsonRpcId = number | string | void;\n\n/**\n * method:\n * A String containing the name of the method to be invoked.\n * Method names that begin with the word rpc followed by a period\n * character (U+002E or ASCII 46) are reserved for rpc-internal methods\n * and extensions and MUST NOT be used for anything else.\n *\n * params:\n * A Structured value that holds the parameter values to be used\n * during the invocation of the method. This member MAY be omitted.\n */\nexport interface JsonRpcNotification<T> {\n  jsonrpc: JsonRpcVersion;\n  method: string;\n  params?: T;\n}\n\nexport interface JsonRpcRequest<T> extends JsonRpcNotification<T> {\n  id: JsonRpcId;\n}\n\nexport interface JsonRpcResponseBase {\n  jsonrpc: JsonRpcVersion;\n  id: JsonRpcId;\n}\n\nexport interface JsonRpcSuccess<T = object> extends JsonRpcResponseBase {\n  result: T;\n}\nexport function isJsonRpcSuccess(response: object): response is JsonRpcSuccess {\n  return 'result' in response;\n}\n\nexport interface JsonRpcFailure<T> extends JsonRpcResponseBase {\n  error: JsonRpcError<T>;\n}\n\nexport interface JsonRpcError<T = object> {\n  /** Must be an integer */\n  code: number;\n  message: string;\n  data?: T;\n}\n\nexport type JsonRpcResponse<T> = JsonRpcSuccess<T> | JsonRpcFailure<T>;\n\n//\n// PRE-DEFINED ERROR CODES\n//\n//\n/** An error occurred on the server while parsing the JSON text. */\nexport const PARSE_ERROR = -32700;\n/** The JSON sent is not a valid Request object. */\nexport const INVALID_REQUEST = -32600;\n/** The method does not exist / is not available. */\nexport const METHOD_NOT_FOUND = -32601;\n/** Invalid method parameter(s). */\nexport const INVALID_PARAMS = -32602;\n/** Internal JSON-RPC error. */\nexport const INTERNAL_ERROR = -32603;\n","import fetch from 'cross-fetch';\nimport { JsonRpcResponse, isJsonRpcSuccess } from './jsonrpc2';\n\nexport interface ResultABCIQuery {\n  response: ResponseQuery;\n}\n\nexport interface ResultKV<K, V> {\n  key: K;\n  value: V;\n}\n\nexport interface ResponseQuery {\n  code: number;\n  log: string;\n  info: string;\n  index: number;\n  key: string;\n  value: any;\n  proof: string;\n  height: number;\n}\n\nexport interface ResultBroadcastTxCommit {\n  check_tx: any;\n  deliver_tx: any;\n  hash: any;\n  height: number;\n}\n\nexport interface ResultBlock {\n  block: Block;\n  block_meta: BlockMeta;\n}\n\nexport interface Block {\n  data: Data;\n}\n\nexport interface BlockMeta {}\n\nexport interface Data {\n  txs: string[];\n}\n\nconst DefaultABCIQueryOptions = {\n  height: 0,\n  trusted: false\n};\n\nexport class Rpc {\n  private _nodeUrl: string;\n\n  constructor(nodeUrl: string) {\n    this._nodeUrl = nodeUrl;\n  }\n\n  abciQuery(path: string, key: string, opts = DefaultABCIQueryOptions): Promise<ResultABCIQuery> {\n    return fetch(this._nodeUrl, {\n      headers: { 'Content-Type': 'text/json' },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 'jsonrpc-client',\n        method: 'abci_query',\n        params: {\n          ...opts,\n          path,\n          data: key\n        }\n      }),\n      method: 'POST',\n      mode: 'cors'\n    })\n      .then(response => response.json())\n      .then((data: JsonRpcResponse<ResultABCIQuery>) => {\n        if ('result' in data) {\n          return data.result as ResultABCIQuery;\n        } else {\n          throw data.error;\n        }\n      });\n  }\n\n  broadcastTxCommit(tx: string): Promise<ResultBroadcastTxCommit> {\n    return fetch(this._nodeUrl, {\n      headers: { 'Content-Type': 'text/json' },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 'jsonrpc-client',\n        method: 'broadcast_tx_commit',\n        params: {\n          tx: tx\n        }\n      }),\n      method: 'POST',\n      mode: 'cors'\n    })\n      .then(response => response.json())\n      .then((data: JsonRpcResponse<ResultBroadcastTxCommit>) => {\n        if (isJsonRpcSuccess(data)) {\n          return data.result as ResultBroadcastTxCommit;\n        } else {\n          throw data.error;\n        }\n      });\n  }\n\n  block(height: number): Promise<ResultBlock> {\n    return fetch(this._nodeUrl, {\n      headers: { 'Content-Type': 'text/json' },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 'jsonrpc-client',\n        method: 'block',\n        params: {\n          height: height\n        }\n      }),\n      method: 'POST',\n      mode: 'cors'\n    })\n      .then(response => response.json())\n      .then((data: JsonRpcResponse<ResultBlock>) => {\n        if (isJsonRpcSuccess(data)) {\n          return data.result as ResultBlock;\n        } else {\n          throw data.error;\n        }\n      });\n  }\n}\n","//@ts-ignore\nimport ByteBuffer from 'bytebuffer';\nimport { convertToRawPubKey, encodePubKey } from '../transport/encoder';\n\nnamespace Keys {\n  export const KVSTOREKEYS = {\n    MainKVStoreKey: 'main',\n    AccountKVStoreKey: 'account',\n    PostKVStoreKey: 'post',\n    ValidatorKVStoreKey: 'validator',\n    GlobalKVStoreKey: 'global',\n    VoteKVStoreKey: 'vote',\n    InfraKVStoreKey: 'infra',\n    DeveloperKVStoreKey: 'developer',\n    ParamKVStoreKey: 'param',\n    ProposalKVStoreKey: 'proposal'\n  };\n  const _KEYS = {\n    validatorSubstore: '00',\n    validatorListSubstore: '01',\n\n    delegationSubstore: '00',\n    voterSubstore: '01',\n    voteSubstore: '02',\n    referenceListSubStore: '03',\n    delegateeSubStore: '04',\n\n    proposalSubstore: '00',\n    proposalListSubStore: '01',\n    nextProposalIDSubstore: '02',\n\n    developerSubstore: '00',\n    developerListSubstore: '01',\n\n    infraProviderSubstore: '00',\n    infraProviderListSubstore: '01',\n\n    accountInfoSubstore: '00',\n    accountBankSubstore: '01',\n    accountMetaSubstore: '02',\n    accountFollowerSubstore: '03',\n    accountFollowingSubstore: '04',\n    accountRewardSubstore: '05',\n    accountPendingStakeQueueSubstore: '06',\n    accountRelationshipSubstore: '07',\n    accountBalanceHistorySubstore: '08',\n    accountGrantPubKeySubstore: '09',\n    accountRewardHistorySubstore: '0a',\n\n    postInfoSubStore: '00',\n    postMetaSubStore: '01',\n    postLikeSubStore: '02',\n    postReportOrUpvoteSubStore: '03',\n    postCommentSubStore: '04',\n    postViewsSubStore: '05',\n    postDonationsSubStore: '06',\n\n    allocationParamSubStore: '00',\n    infraInternalAllocationParamSubStore: '01',\n    evaluateOfContentValueParamSubStore: '02',\n    developerParamSubStore: '03',\n    voteParamSubStore: '04',\n    proposalParamSubStore: '05',\n    validatorParamSubStore: '06',\n    coinDayParamSubStore: '07',\n    bandwidthParamSubStore: '08',\n    accountParamSubstore: '09',\n    postParamSubStore: '10',\n\n    globalMetaSubStore: '01',\n    inflationPoolSubStore: '02',\n    consumptionMetaSubStore: '03',\n    tpsSubStore: '04',\n\n    sep: ByteBuffer.fromUTF8('/').toHex(),\n    separator: '/'\n  };\n\n  export function getHexSubstringAfterKeySeparator(key: string): string {\n    return key.substr(key.indexOf(_KEYS.separator) + 1, key.length);\n  }\n\n  export function getSubstringAfterKeySeparator(key: string): string {\n    return key.substr(key.indexOf(_KEYS.separator) + 1, key.length);\n  }\n\n  export function getSubstringAfterSubstore(key: string): string {\n    return key.substr(2, key.length);\n  }\n\n  // validator related\n  export function getValidatorKey(accKey: string): string {\n    const accKeyHex = ByteBuffer.fromUTF8(accKey).toHex();\n    return _KEYS.validatorSubstore.concat(accKeyHex);\n  }\n\n  export function getValidatorListKey(): string {\n    return _KEYS.validatorListSubstore;\n  }\n\n  // vote related\n  export function getVotePrefix(id: string): string {\n    const idHex = ByteBuffer.fromUTF8(id).toHex();\n    return _KEYS.voteSubstore.concat(idHex).concat(_KEYS.sep);\n  }\n\n  export function getVoteKey(proposalID: string, voter: string): string {\n    const voterHex = ByteBuffer.fromUTF8(voter).toHex();\n    return getVotePrefix(proposalID).concat(voterHex);\n  }\n\n  export function getDelegationPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.delegationSubstore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  export function getDelegationKey(me: string, myDelegator: string): string {\n    const myDelegatorHex = ByteBuffer.fromUTF8(myDelegator).toHex();\n    return getDelegationPrefix(me).concat(myDelegatorHex);\n  }\n\n  export function getVoterKey(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.voterSubstore.concat(meHex);\n  }\n\n  export function getDelegateePrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.delegateeSubStore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  export function getDelegateeKey(me: string, myDelegatee: string): string {\n    const myDelegateeHex = ByteBuffer.fromUTF8(myDelegatee).toHex();\n    return getDelegateePrefix(me).concat(myDelegateeHex);\n  }\n\n  // developer related\n  export function getDeveloperKey(accKey: string): string {\n    const accKeyHex = ByteBuffer.fromUTF8(accKey).toHex();\n    return _KEYS.developerSubstore.concat(accKeyHex);\n  }\n\n  export function getDeveloperPrefix(): string {\n    return _KEYS.developerSubstore;\n  }\n\n  export function getDeveloperListKey(): string {\n    return _KEYS.developerListSubstore;\n  }\n\n  // infra related\n  export function getInfraProviderKey(accKey: string): string {\n    const accKeyHex = ByteBuffer.fromUTF8(accKey).toHex();\n    return _KEYS.infraProviderSubstore.concat(accKeyHex);\n  }\n\n  export function getInfraProviderListKey(): string {\n    return _KEYS.infraProviderListSubstore;\n  }\n\n  // account related\n  export function getAccountInfoKey(accKey: string): string {\n    const accKeyHex = ByteBuffer.fromUTF8(accKey).toHex();\n    return _KEYS.accountInfoSubstore.concat(accKeyHex);\n  }\n\n  export function getAccountBankKey(accKey: string): string {\n    const accKeyHex = ByteBuffer.fromUTF8(accKey).toHex();\n    return _KEYS.accountBankSubstore.concat(accKeyHex);\n  }\n\n  export function getAccountMetaKey(accKey: string): string {\n    const accKeyHex = ByteBuffer.fromUTF8(accKey).toHex();\n    return _KEYS.accountMetaSubstore.concat(accKeyHex);\n  }\n\n  export function getFollowerPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.accountFollowerSubstore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  export function getFollowingPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.accountFollowingSubstore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  export function getFollowerKey(me: string, myFollower: string): string {\n    const myFollowerHex = ByteBuffer.fromUTF8(myFollower).toHex();\n    return getFollowerPrefix(me).concat(myFollowerHex);\n  }\n\n  export function getFollowingKey(me: string, myFollowing: string): string {\n    const myFollowingHex = ByteBuffer.fromUTF8(myFollowing).toHex();\n    return getFollowingPrefix(me).concat(myFollowingHex);\n  }\n\n  export function getRewardKey(accKey: string): string {\n    const accKeyHex = ByteBuffer.fromUTF8(accKey).toHex();\n    return _KEYS.accountRewardSubstore.concat(accKeyHex);\n  }\n\n  export function getRewardHistoryPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.accountRewardHistorySubstore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  export function getRewardHistoryKey(me: string, bucketSlot: string): string {\n    const bucketSlotHex = ByteBuffer.fromUTF8(bucketSlot).toHex();\n    return getRewardHistoryPrefix(me).concat(bucketSlotHex);\n  }\n\n  export function getRelationshipPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.accountRelationshipSubstore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  export function getRelationshipKey(me: string, other: string): string {\n    const otherHex = ByteBuffer.fromUTF8(other).toHex();\n    return getRelationshipPrefix(me).concat(otherHex);\n  }\n\n  export function getBalanceHistoryPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.accountBalanceHistorySubstore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  export function getBalanceHistoryKey(me: string, bucketSlot: string): string {\n    const bucketSlotHex = ByteBuffer.fromUTF8(bucketSlot).toHex();\n    return getBalanceHistoryPrefix(me).concat(bucketSlotHex);\n  }\n\n  export function getGrantPubKeyPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.accountGrantPubKeySubstore.concat(meHex).concat(_KEYS.sep);\n  }\n\n  // TODO: should the pubKey be string or crypto.PubKey?\n  export function getgrantPubKeyKey(me: string, pubKey: string): string {\n    const pubKeyHex = ByteBuffer.fromUTF8(pubKey).toHex();\n    return getGrantPubKeyPrefix(me).concat(pubKeyHex);\n  }\n\n  // post related\n  export function getPermlink(author: string, postID: string): string {\n    return author.concat('#').concat(postID);\n  }\n\n  export function getPostInfoPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.postInfoSubStore.concat(meHex);\n  }\n\n  export function getPostInfoKey(permlink: string): string {\n    const permlinkHex = ByteBuffer.fromUTF8(permlink).toHex();\n    return _KEYS.postInfoSubStore.concat(permlinkHex);\n  }\n\n  export function getPostMetaPrefix(me: string): string {\n    const meHex = ByteBuffer.fromUTF8(me).toHex();\n    return _KEYS.postMetaSubStore.concat(meHex);\n  }\n\n  export function getPostMetaKey(permlink: string): string {\n    const permlinkHex = ByteBuffer.fromUTF8(permlink).toHex();\n    return _KEYS.postMetaSubStore.concat(permlinkHex);\n  }\n\n  export function getPostLikePrefix(permlink: string): string {\n    const permlinkHex = ByteBuffer.fromUTF8(permlink).toHex();\n    return _KEYS.postLikeSubStore.concat(permlinkHex).concat(_KEYS.sep);\n  }\n\n  export function getPostLikeKey(permlink: string, likeUser: string): string {\n    const likeUserHex = ByteBuffer.fromUTF8(likeUser).toHex();\n    return getPostLikePrefix(permlink).concat(likeUserHex);\n  }\n\n  export function getPostReportOrUpvotePrefix(permlink: string): string {\n    const permlinkHex = ByteBuffer.fromUTF8(permlink).toHex();\n    return _KEYS.postReportOrUpvoteSubStore.concat(permlinkHex).concat(_KEYS.sep);\n  }\n\n  export function getPostReportOrUpvoteKey(permlink: string, user: string): string {\n    const userHex = ByteBuffer.fromUTF8(user).toHex();\n    return getPostReportOrUpvotePrefix(permlink).concat(userHex);\n  }\n\n  export function getPostViewPrefix(permlink: string): string {\n    const permlinkHex = ByteBuffer.fromUTF8(permlink).toHex();\n    return _KEYS.postViewsSubStore.concat(permlinkHex).concat(_KEYS.sep);\n  }\n\n  export function getPostViewKey(permlink: string, viewUser: string): string {\n    const viewUserHex = ByteBuffer.fromUTF8(viewUser).toHex();\n    return getPostViewPrefix(permlink).concat(viewUserHex);\n  }\n\n  export function getPostCommentPrefix(permlink: string): string {\n    const permlinkHex = ByteBuffer.fromUTF8(permlink).toHex();\n    return _KEYS.postCommentSubStore.concat(permlinkHex).concat(_KEYS.sep);\n  }\n\n  export function getPostCommentKey(permlink: string, commentPermlink: string): string {\n    const commentPermlinkHex = ByteBuffer.fromUTF8(commentPermlink).toHex();\n    return getPostCommentPrefix(permlink).concat(commentPermlinkHex);\n  }\n\n  export function getPostDonationsPrefix(permlink: string): string {\n    const permlinkHex = ByteBuffer.fromUTF8(permlink).toHex();\n    return _KEYS.postDonationsSubStore.concat(permlinkHex).concat(_KEYS.sep);\n  }\n\n  export function getPostDonationsKey(permlink: string, donateUser: string): string {\n    const donateUserHex = ByteBuffer.fromUTF8(donateUser).toHex();\n    return getPostDonationsPrefix(permlink).concat(donateUserHex);\n  }\n\n  // proposal related\n  export function getProposalKey(proposalID: string): string {\n    const proposalIDHex = ByteBuffer.fromUTF8(proposalID).toHex();\n    return _KEYS.proposalSubstore.concat(proposalIDHex);\n  }\n\n  export function getProposalListKey(): string {\n    return _KEYS.proposalListSubStore;\n  }\n\n  export function getNextProposalIDKey(): string {\n    return _KEYS.nextProposalIDSubstore;\n  }\n\n  // param related\n  export function getEvaluateOfContentValueParamKey(): string {\n    return _KEYS.evaluateOfContentValueParamSubStore;\n  }\n\n  export function getGlobalAllocationParamKey(): string {\n    return _KEYS.allocationParamSubStore;\n  }\n\n  export function getInfraInternalAllocationParamKey(): string {\n    return _KEYS.infraInternalAllocationParamSubStore;\n  }\n\n  export function getDeveloperParamKey(): string {\n    return _KEYS.developerParamSubStore;\n  }\n\n  export function getVoteParamKey(): string {\n    return _KEYS.voteParamSubStore;\n  }\n\n  export function getValidatorParamKey(): string {\n    return _KEYS.validatorParamSubStore;\n  }\n\n  export function getProposalParamKey(): string {\n    return _KEYS.proposalParamSubStore;\n  }\n\n  export function getCoinDayParamKey(): string {\n    return _KEYS.coinDayParamSubStore;\n  }\n\n  export function getBandwidthParamKey(): string {\n    return _KEYS.bandwidthParamSubStore;\n  }\n\n  export function getAccountParamKey(): string {\n    return _KEYS.accountParamSubstore;\n  }\n\n  export function getPostParamKey(): string {\n    return _KEYS.postParamSubStore;\n  }\n\n  export function getGlobalMetaKey(): string {\n    return _KEYS.globalMetaSubStore;\n  }\n\n  export function getInflationPoolKey(): string {\n    return _KEYS.inflationPoolSubStore;\n  }\n\n  export function getConsumptionMetaKey(): string {\n    return _KEYS.consumptionMetaSubStore;\n  }\n\n  export function getTPSKey(): string {\n    return _KEYS.tpsSubStore;\n  }\n}\n\nexport default Keys;\n","import ByteBuffer from 'bytebuffer';\nimport { ec as EC } from 'elliptic';\nimport { decodePrivKey, encodeSignMsg, encodeTx, convertMsg, StdMsg, encodeMsg } from './encoder';\nimport { ResultBlock, ResultBroadcastTxCommit, Rpc } from './rpc';\nimport Keys from '../query/keys';\n\nexport interface ITransport {\n  query<T = any>(key: string, storeName: string): Promise<T>;\n  querySubspace<T = any>(\n    subspace: string,\n    storeName: string,\n    getKeyBy: GetKeyBy\n  ): Promise<ResultKV<string, T>[]>;\n  block(height: number): Promise<ResultBlock>;\n  signBuildBroadcast(\n    msg: any,\n    msgType: string,\n    privKeyHex: string,\n    seq: number\n  ): Promise<ResultBroadcastTxCommit>;\n}\n\nexport interface ITransportOptions {\n  nodeUrl: string;\n  chainId?: string;\n}\n\nexport interface ResultKV<K, V> {\n  key: K;\n  value: V;\n}\n\nexport class Transport implements ITransport {\n  // This will be hard coded later\n  private _chainId: string;\n  private _rpc: Rpc;\n\n  constructor(opt: ITransportOptions) {\n    this._rpc = new Rpc(opt.nodeUrl); // create with nodeUrl\n    this._chainId = opt.chainId || 'test-chain-z0QKeL';\n  }\n\n  query<T>(key: string, storeName: string): Promise<T> {\n    // transport: get path and key for ABCIQuery and return result\n    // get transport's node and do ABCIQuery\n    // rpc client do rpc call\n    // check resp\n    const path = `/store/${storeName}/key`;\n    return this._rpc.abciQuery(path, key).then(result => {\n      if (!result.response || !result.response.value) {\n        throw new Error('Query failed: Empty result');\n      }\n\n      const jsonStr = ByteBuffer.atob(result.response.value);\n      return JSON.parse(jsonStr) as T;\n    });\n  }\n\n  querySubspace<V>(\n    subspace: string,\n    storeName: string,\n    getKeyBy: GetKeyBy\n  ): Promise<ResultKV<string, V>[]> {\n    // transport: get path and key for ABCIQuery and return result\n    // get transport's node and do ABCIQuery\n    // rpc client do rpc call\n    // check resp\n    const path = `/store/${storeName}/subspace-js`;\n    return this._rpc.abciQuery(path, subspace).then(result => {\n      if (!result.response || !result.response.value) {\n        throw new Error('QuerySubspace failed: Empty result');\n      }\n\n      const resValStr = ByteBuffer.atob(result.response.value);\n      let resKVs = JSON.parse(resValStr);\n      let rst: ResultKV<string, V>[] = [];\n      if (resKVs === null) {\n        return rst;\n      }\n      for (let i = 0; i < resKVs.length; i++) {\n        const rawKey = ByteBuffer.atob(resKVs[i].key);\n        let keyStr: string = '';\n        switch (getKeyBy) {\n          case GetKeyBy.GetHexSubstringAfterKeySeparator: {\n            keyStr = Keys.getHexSubstringAfterKeySeparator(rawKey);\n            break;\n          }\n          case GetKeyBy.GetSubstringAfterKeySeparator: {\n            keyStr = Keys.getSubstringAfterKeySeparator(rawKey);\n            break;\n          }\n          default: {\n            keyStr = rawKey;\n          }\n        }\n        const jsonValueStr = ByteBuffer.atob(resKVs[i].value);\n        let value = JSON.parse(jsonValueStr) as V;\n        let item: ResultKV<string, V> = { key: keyStr, value: value };\n        rst.push(item);\n      }\n\n      return rst;\n    });\n  }\n\n  block(height: number): Promise<ResultBlock> {\n    return this._rpc.block(height).then(result => {\n      return result as ResultBlock;\n    });\n  }\n\n  // Does the private key decoding from hex, sign message,\n  // build transaction to broadcast\n  signBuildBroadcast(\n    msg: any,\n    msgType: string,\n    privKeyHex: string,\n    seq: number\n  ): Promise<ResultBroadcastTxCommit> {\n    // private key from hex\n    var ec = new EC('secp256k1');\n    var key = ec.keyFromPrivate(decodePrivKey(privKeyHex), 'hex');\n\n    // XXX: side effect on msg\n    convertMsg(msg);\n    const stdMsg: StdMsg = {\n      type: msgType,\n      value: encodeMsg(msg)\n    };\n\n    // signmsg\n    const signMsgHash = encodeSignMsg(stdMsg, this._chainId, seq);\n    // sign to get signature\n    const sig = key.sign(signMsgHash, { canonical: true });\n    const sigDERHex = sig.toDER('hex');\n    // build tx\n    const tx = encodeTx(stdMsg, key.getPublic(true, 'hex'), sigDERHex, seq);\n\n    // return broadcast\n    return this._rpc.broadcastTxCommit(tx).then(result => {\n      if (result.check_tx.code !== undefined) {\n        throw new BroadcastError(\n          BroadCastErrorEnum.CheckTx,\n          result.check_tx.log,\n          result.check_tx.code\n        );\n      } else if (result.deliver_tx.code !== undefined) {\n        throw new BroadcastError(\n          BroadCastErrorEnum.DeliverTx,\n          result.deliver_tx.log,\n          result.deliver_tx.code\n        );\n      }\n      return result;\n    });\n  }\n}\n\nexport enum BroadCastErrorEnum {\n  CheckTx,\n  DeliverTx\n}\n\nexport enum GetKeyBy {\n  GetSubstringAfterKeySeparator,\n  GetHexSubstringAfterKeySeparator,\n  GetSubstringAfterSubstore\n}\n\n// How to extend Error in TS2.1+:\n// https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\nexport class BroadcastError extends Error {\n  readonly code: number;\n  readonly type: BroadCastErrorEnum;\n\n  constructor(type: BroadCastErrorEnum, log: string, code: number) {\n    super(log);\n    Object.setPrototypeOf(this, BroadcastError.prototype);\n    this.type = type;\n    this.code = code;\n  }\n}\n","import { ec as EC } from 'elliptic';\nimport shajs from 'sha.js';\nimport { decodePrivKey, decodePubKey, encodePrivKey, encodePubKey } from '../transport/encoder';\n\nexport function genPrivKeyHex(): string {\n  const ec = new EC('secp256k1');\n  const rawKey = ec.genKeyPair().getPrivate('hex');\n  return encodePrivKey(rawKey);\n}\n\nexport function pubKeyFromPrivate(privKeyHex: string): string {\n  var ec = new EC('secp256k1');\n  var key = ec.keyFromPrivate(decodePrivKey(privKeyHex), 'hex');\n  const rawKey = key.getPublic(true, 'hex');\n  return encodePubKey(rawKey);\n}\n\nexport function isValidUsername(username: string): boolean {\n  const reg = /^[a-z0-9]([a-z0-9_-]){2,20}$/;\n  const match = reg.exec(username);\n  return match != null;\n}\n\nexport function isKeyMatch(privKeyHex: string, pubKeyHex: string): boolean {\n  const ec = new EC('secp256k1');\n  var key = ec.keyFromPrivate(decodePrivKey(privKeyHex), 'hex');\n  return key.getPublic(true, 'hex').toUpperCase() == decodePubKey(pubKeyHex);\n}\n\n// deterministically generates new priv-key bytes from provided key.\nexport function derivePrivKey(privKeyHex): string {\n  const ec = new EC('secp256k1');\n  const keyHash = shajs('sha256')\n    .update(privKeyHex)\n    .digest();\n  var key = ec.genKeyPair({ entropy: keyHash });\n  return encodePrivKey(key.getPrivate('hex'));\n}\n","import ByteBuffer from 'bytebuffer';\nimport * as Types from '../common';\nimport { ITransport, GetKeyBy, ResultKV } from '../transport';\nimport { decodePubKey } from '../transport/encoder';\nimport { InternalPubKey, StdTx, convertToRawPubKey, encodePubKey } from '../transport/encoder';\nimport { ResultBlock } from '../transport/rpc';\nimport * as Util from '../util/index';\nimport Keys from './keys';\n\nexport default class Query {\n  private _transport: ITransport;\n\n  constructor(transport: ITransport) {\n    this._transport = transport;\n  }\n\n  /**\n   * doesUsernameMatchMasterPrivKey returns true if a user has the master private key.\n   *\n   * @param username\n   * @param masterPrivKeyHex\n   */\n  doesUsernameMatchMasterPrivKey(username: string, masterPrivKeyHex: string): Promise<boolean> {\n    return this.getAccountInfo(username).then(info => {\n      if (info == null) {\n        return false;\n      }\n      return Util.isKeyMatch(masterPrivKeyHex, info.master_key);\n    });\n  }\n\n  /**\n   * doesUsernameMatchTxPrivKey returns true if a user has the transaction private key.\n   *\n   * @param username\n   * @param txPrivKeyHex\n   */\n  doesUsernameMatchTxPrivKey(username: string, txPrivKeyHex: string): Promise<boolean> {\n    return this.getAccountInfo(username).then(info => {\n      if (info == null) {\n        return false;\n      }\n      return Util.isKeyMatch(txPrivKeyHex, info.transaction_key);\n    });\n  }\n\n  /**\n   * doesUsernameMatchMicropaymentPrivKey returns true if a user has the micropayment private key.\n   *\n   * @param username\n   * @param micropaymentPrivKeyHex\n   */\n  doesUsernameMatchMicropaymentPrivKey(\n    username: string,\n    micropaymentPrivKeyHex: string\n  ): Promise<boolean> {\n    return this.getAccountInfo(username).then(info => {\n      if (info == null) {\n        return false;\n      }\n      return Util.isKeyMatch(micropaymentPrivKeyHex, info.micropayment_key);\n    });\n  }\n\n  /**\n   * doesUsernameMatchPostPrivKey returns true if a user has the post private key.\n   *\n   * @param username\n   * @param postPrivKeyHex\n   */\n  doesUsernameMatchPostPrivKey(username: string, postPrivKeyHex: string): Promise<boolean> {\n    return this.getAccountInfo(username).then(info => {\n      if (info == null) {\n        return false;\n      }\n      return Util.isKeyMatch(postPrivKeyHex, info.post_key);\n    });\n  }\n\n  // validator related query\n\n  /**\n   * getAllValidators returns all oncall validators from blockchain.\n   */\n  getAllValidators(): Promise<AllValidators> {\n    const ValidatorKVStoreKey = Keys.KVSTOREKEYS.ValidatorKVStoreKey;\n    return this._transport.query<AllValidators>(Keys.getValidatorListKey(), ValidatorKVStoreKey);\n  }\n\n  /**\n   * getValidator returns validator info given a validator name from blockchain.\n   *\n   * @param username: the validator username\n   */\n  getValidator(username: string): Promise<Validator> {\n    const ValidatorKVStoreKey = Keys.KVSTOREKEYS.ValidatorKVStoreKey;\n    return this._transport.query<Validator>(Keys.getValidatorKey(username), ValidatorKVStoreKey);\n  }\n\n  // account related query\n\n  /**\n   * getSeqNumber returns the next sequence number of a user which should\n   * be used for broadcast.\n   *\n   * @param username\n   */\n  getSeqNumber(username: string): Promise<number> {\n    return this.getAccountMeta(username).then(meta => {\n      return meta.sequence;\n    });\n  }\n\n  /**\n   * getAllBalanceHistory returns all transaction history related to\n   * a user's account balance, in reverse-chronological order.\n   *\n   * @param username\n   */\n  getAllBalanceHistory(username: string): Promise<BalanceHistory> {\n    return this.getAccountBank(username).then(bank => {\n      let res: BalanceHistory = { details: [] };\n      if (bank.number_of_transaction == 0) {\n        return res;\n      }\n\n      let numberOfbundle = (bank.number_of_transaction - 1) / 100;\n      let promises: Promise<BalanceHistory>[] = [];\n      for (var i = 0; i <= numberOfbundle; ++i) {\n        promises.push(this.getBalanceHistoryBundle(username, i));\n      }\n\n      return Promise.all(promises).then(bundles => {\n        bundles.reduce((prev, curr) => {\n          prev.details.push(...curr.details);\n          return prev;\n        }, res);\n\n        res.details.reverse();\n        return res;\n      });\n    });\n  }\n\n  /**\n   * getBalanceHistoryBundle returns all balance history in a certain bucket.\n   *\n   * @param username\n   * @param index\n   */\n  getBalanceHistoryBundle(username: string, index: number): Promise<BalanceHistory> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<BalanceHistory>(\n      Keys.getBalanceHistoryKey(username, index.toString()),\n      AccountKVStoreKey\n    );\n  }\n\n  /**\n   * getAccountMeta returns account meta info for a specific user.\n   *\n   * @param username\n   */\n  getAccountMeta(username: string): Promise<AccountMeta> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<AccountMeta>(Keys.getAccountMetaKey(username), AccountKVStoreKey);\n  }\n\n  /**\n   * getAccountBank returns account bank info for a specific user.\n   *\n   * @param username\n   */\n  getAccountBank(username: string): Promise<AccountBank> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<AccountBank>(Keys.getAccountBankKey(username), AccountKVStoreKey);\n  }\n\n  /**\n   * getAccountInfo returns account info for a specific user.\n   *\n   * @param username\n   */\n  getAccountInfo(username: string): Promise<AccountInfo> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport\n      .query<AccountInfoInternal>(Keys.getAccountInfoKey(username), AccountKVStoreKey)\n      .then(info => {\n        const res: AccountInfo = {\n          username: info.username,\n          created_at: info.created_at,\n          master_key: encodePubKey(convertToRawPubKey(info.master_key)),\n          transaction_key: encodePubKey(convertToRawPubKey(info.transaction_key)),\n          micropayment_key: encodePubKey(convertToRawPubKey(info.micropayment_key)),\n          post_key: encodePubKey(convertToRawPubKey(info.post_key))\n        };\n        return res;\n      });\n  }\n\n  /**\n   * getGrantPubKey returns the specific granted pubkey info of a user\n   * that has given to the pubKey.\n   *\n   * @param username\n   * @param pubKeyHex\n   */\n  getGrantPubKey(username: string, pubKeyHex: string): Promise<GrantPubKey> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    const publicKey = decodePubKey(pubKeyHex);\n    return this._transport.query<GrantPubKey>(\n      Keys.getgrantPubKeyKey(username, publicKey),\n      AccountKVStoreKey\n    );\n  }\n\n  /**\n   * getAllGrantPubKeys returns a list of all granted public keys of a user.\n   *\n   * @param username\n   */\n  getAllGrantPubKeys(username: string): Promise<ResultKV<string, GrantPubKey>[]> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.querySubspace<GrantPubKey>(\n      Keys.getGrantPubKeyPrefix(username),\n      AccountKVStoreKey,\n      GetKeyBy.GetHexSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getReward returns rewards of a user.\n   *\n   * @param username\n   */\n  getReward(username: string): Promise<Reward> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<Reward>(Keys.getRewardKey(username), AccountKVStoreKey);\n  }\n\n  /**\n   * getAllRewardHistory returns all reward history related to\n   * a user's posts reward, in reverse-chronological order.\n   *\n   * @param username\n   */\n  getAllRewardHistory(username: string): Promise<RewardHistory> {\n    return this.getAccountBank(username).then(bank => {\n      let res: RewardHistory = { details: [] };\n      if (bank.number_of_reward == 0) {\n        return res;\n      }\n\n      let numberOfbundle = (bank.number_of_reward - 1) / 100;\n      let promises: Promise<RewardHistory>[] = [];\n      for (var i = 0; i <= numberOfbundle; ++i) {\n        promises.push(this.getRewardHistoryBundle(username, i));\n      }\n\n      return Promise.all(promises).then(bundles => {\n        bundles.reduce((prev, curr) => {\n          prev.details.push(...curr.details);\n          return prev;\n        }, res);\n        res.details.reverse();\n        return res;\n      });\n    });\n  }\n\n  /**\n   * getRewardHistoryBundle returns all reward history in a certain bucket.\n   *\n   * @param username\n   * @param index\n   */\n  getRewardHistoryBundle(username: string, index: number): Promise<RewardHistory> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<RewardHistory>(\n      Keys.getRewardHistoryKey(username, index.toString()),\n      AccountKVStoreKey\n    );\n  }\n\n  /**\n   * getRelationship returns the donation times of two users.\n   *\n   * @param me\n   * @param other\n   */\n  getRelationship(me: string, other: string): Promise<Relationship> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<Relationship>(\n      Keys.getRelationshipKey(me, other),\n      AccountKVStoreKey\n    );\n  }\n\n  /**\n   * getAllRelationships returns all donation relationship of a user.\n   *\n   * @param username\n   */\n  getAllRelationships(username: string): Promise<ResultKV<string, Relationship>[]> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.querySubspace<Relationship>(\n      Keys.getRelationshipPrefix(username),\n      AccountKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getFollowerMeta returns the follower meta of two users.\n   *\n   * @param me\n   * @param myFollower\n   */\n  getFollowerMeta(me: string, myFollower: string): Promise<FollowerMeta> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<FollowerMeta>(\n      Keys.getFollowerKey(me, myFollower),\n      AccountKVStoreKey\n    );\n  }\n\n  /**\n   * getAllFollowerMeta returns all follower meta of a user.\n   *\n   * @param username\n   */\n  getAllFollowerMeta(username: string): Promise<ResultKV<string, FollowerMeta>[]> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.querySubspace<FollowerMeta>(\n      Keys.getFollowerPrefix(username),\n      AccountKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getFollowingMeta returns the following meta of two users.\n   *\n   * @param me\n   * @param myFollowing\n   */\n  getFollowingMeta(me: string, myFollowing: string): Promise<FollowingMeta> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.query<FollowingMeta>(\n      Keys.getFollowingKey(me, myFollowing),\n      AccountKVStoreKey\n    );\n  }\n\n  /**\n   * getAllFollowingMeta returns all following meta of a user.\n   *\n   * @param username\n   */\n  getAllFollowingMeta(username: string): Promise<ResultKV<string, FollowingMeta>[]> {\n    const AccountKVStoreKey = Keys.KVSTOREKEYS.AccountKVStoreKey;\n    return this._transport.querySubspace<FollowingMeta>(\n      Keys.getFollowingPrefix(username),\n      AccountKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  // post related query\n\n  /**\n   * getAllPosts returns all posts the author created.\n   *\n   * @param author\n   */\n  getAllPosts(author: string): Promise<ResultKV<string, PostInfo>[]> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    return this._transport.querySubspace<PostInfo>(\n      Keys.getPostInfoPrefix(author),\n      PostKVStoreKey,\n      GetKeyBy.GetSubstringAfterSubstore\n    );\n  }\n\n  /**\n   * getPostComment returns a specific comment of a post given the post permlink\n   * and comment permlink.\n   *\n   * @param author\n   * @param postID\n   * @param commentPermlink\n   */\n  getPostComment(author: string, postID: string, commentPermlink: string): Promise<Comment> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.query<Comment>(\n      Keys.getPostCommentKey(Permlink, commentPermlink),\n      PostKVStoreKey\n    );\n  }\n\n  /**\n   * getPostAllComments returns all comments that a post has.\n   *\n   * @param author\n   * @param postID\n   */\n  getPostAllComments(author: string, postID: string): Promise<ResultKV<string, Comment>[]> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.querySubspace<Comment>(\n      Keys.getPostCommentPrefix(Permlink),\n      PostKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getPostView returns a view of a post performed by a user.\n   *\n   * @param author\n   * @param postID\n   * @param viewUser\n   */\n  getPostView(author: string, postID: string, viewUser: string): Promise<View> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.query<View>(Keys.getPostViewKey(Permlink, viewUser), PostKVStoreKey);\n  }\n\n  /**\n   * getPostAllViews returns all views that a post has.\n   *\n   * @param author\n   * @param postID\n   */\n  getPostAllViews(author: string, postID: string): Promise<ResultKV<string, View>[]> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.querySubspace<View>(\n      Keys.getPostViewPrefix(Permlink),\n      PostKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getPostDonations returns all donations that a user has given to a post.\n   *\n   * @param author\n   * @param postID\n   * @param donateUser\n   */\n  getPostDonations(author: string, postID: string, donateUser: string): Promise<Donations> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.query<Donations>(\n      Keys.getPostDonationsKey(Permlink, donateUser),\n      PostKVStoreKey\n    );\n  }\n\n  /**\n   * getPostAllDonations returns all donations that a post has received.\n   *\n   * @param author\n   * @param postID\n   */\n  getPostAllDonations(author: string, postID: string): Promise<ResultKV<string, Donations>[]> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.querySubspace<Donations>(\n      Keys.getPostDonationsPrefix(Permlink),\n      PostKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getPostReportOrUpvote returns report or upvote that a user has given to a post.\n   *\n   * @param author\n   * @param postID\n   * @param user\n   */\n  getPostReportOrUpvote(author: string, postID: string, user: string): Promise<ReportOrUpvote> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.query<ReportOrUpvote>(\n      Keys.getPostReportOrUpvoteKey(Permlink, user),\n      PostKVStoreKey\n    );\n  }\n\n  /**\n   * getPostAllReportOrUpvotes returns all reports or upvotes that a post has received.\n   *\n   * @param author\n   * @param postID\n   */\n  getPostAllReportOrUpvotes(\n    author: string,\n    postID: string\n  ): Promise<ResultKV<string, ReportOrUpvote>[]> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.querySubspace<ReportOrUpvote>(\n      Keys.getPostReportOrUpvotePrefix(Permlink),\n      PostKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getPostLike returns like that a user has given to a post.\n   *\n   * @param author\n   * @param postID\n   * @param likeUser\n   */\n  getPostLike(author: string, postID: string, likeUser: string): Promise<Like> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.query<Like>(Keys.getPostLikeKey(Permlink, likeUser), PostKVStoreKey);\n  }\n\n  /**\n   * getPostAllLikes returns all likes that a post has received.\n   *\n   * @param author\n   * @param postID\n   */\n  getPostAllLikes(author: string, postID: string): Promise<ResultKV<string, Like>[]> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.querySubspace<Like>(\n      Keys.getPostLikePrefix(Permlink),\n      PostKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getPostInfo returns post info given a permlink(author#postID).\n   *\n   * @param author\n   * @param postID\n   */\n  getPostInfo(author: string, postID: string): Promise<PostInfo> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.query<PostInfo>(Keys.getPostInfoKey(Permlink), PostKVStoreKey);\n  }\n\n  /**\n   * getPostMeta returns post meta given a permlink.\n   *\n   * @param author\n   * @param postID\n   */\n  getPostMeta(author: string, postID: string): Promise<PostMeta> {\n    const PostKVStoreKey = Keys.KVSTOREKEYS.PostKVStoreKey;\n    const Permlink = Keys.getPermlink(author, postID);\n    return this._transport.query<PostMeta>(Keys.getPostMetaKey(Permlink), PostKVStoreKey);\n  }\n\n  // vote related query\n\n  /**\n   * GetDelegation returns the delegation relationship between\n   * a voter and a delegator from blockchain.\n   *\n   * @param voter\n   * @param delegator\n   */\n  getDelegation(voter: string, delegator: string): Promise<Delegation> {\n    const VoteKVStoreKey = Keys.KVSTOREKEYS.VoteKVStoreKey;\n    return this._transport\n      .query<Delegation>(Keys.getDelegationKey(voter, delegator), VoteKVStoreKey)\n      .then(result => {\n        return result;\n      });\n  }\n\n  /**\n   * getVoterAllDelegation returns all delegations that are delegated to a voter.\n   *\n   * @param voter\n   */\n  getVoterAllDelegation(voter: string): Promise<ResultKV<string, Delegation>[]> {\n    const VoteKVStoreKey = Keys.KVSTOREKEYS.VoteKVStoreKey;\n    return this._transport.querySubspace<Delegation>(\n      Keys.getDelegationPrefix(voter),\n      VoteKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getDelegatorAllDelegation returns all delegations that a delegator has delegated to.\n   *\n   * @param delegatorName\n   */\n  getDelegatorAllDelegation(delegatorName: string): Promise<ResultKV<string, Delegation>[]> {\n    const VoteKVStoreKey = Keys.KVSTOREKEYS.VoteKVStoreKey;\n    return this._transport.querySubspace<Delegation>(\n      Keys.getDelegateePrefix(delegatorName),\n      VoteKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  /**\n   * getVoter returns voter info given a voter name from blockchain.\n   *\n   * @param voterName\n   */\n  getVoter(voterName: string): Promise<Voter> {\n    const VoteKVStoreKey = Keys.KVSTOREKEYS.VoteKVStoreKey;\n    return this._transport.query<Voter>(Keys.getVoterKey(voterName), VoteKVStoreKey);\n  }\n\n  /**\n   * getVote returns a vote performed by a voter for a given proposal.\n   *\n   * @param proposalID\n   * @param voter\n   */\n  getVote(proposalID: string, voter: string): Promise<Vote> {\n    const VoteKVStoreKey = Keys.KVSTOREKEYS.VoteKVStoreKey;\n    return this._transport.query<Vote>(Keys.getVoteKey(proposalID, voter), VoteKVStoreKey);\n  }\n\n  /**\n   * getProposalAllVotes returns all votes of a given proposal.\n   *\n   * @param proposalID\n   */\n  getProposalAllVotes(proposalID: string): Promise<ResultKV<string, Vote>[]> {\n    const VoteKVStoreKey = Keys.KVSTOREKEYS.VoteKVStoreKey;\n    return this._transport.querySubspace<Vote>(\n      Keys.getVotePrefix(proposalID),\n      VoteKVStoreKey,\n      GetKeyBy.GetSubstringAfterKeySeparator\n    );\n  }\n\n  // developer related query\n\n  /**\n   * getDeveloper returns a specific developer info from blockchain\n   *\n   * @param developerName\n   */\n  getDeveloper(developerName: string): Promise<Developer> {\n    const DeveloperKVStoreKey = Keys.KVSTOREKEYS.DeveloperKVStoreKey;\n    return this._transport.query<Developer>(\n      Keys.getDeveloperKey(developerName),\n      DeveloperKVStoreKey\n    );\n  }\n\n  /**\n   * getDevelopers returns a list of develop.\n   */\n  getDevelopers(): Promise<ResultKV<string, Developer>[]> {\n    const DeveloperKVStoreKey = Keys.KVSTOREKEYS.DeveloperKVStoreKey;\n    return this._transport.querySubspace<Developer>(\n      Keys.getDeveloperPrefix(),\n      DeveloperKVStoreKey,\n      GetKeyBy.GetSubstringAfterSubstore\n    );\n  }\n\n  /**\n   * getDeveloperList returns a list of developer name.\n   */\n  getDeveloperList(): Promise<DeveloperList> {\n    const DeveloperKVStoreKey = Keys.KVSTOREKEYS.DeveloperKVStoreKey;\n    return this._transport.query<DeveloperList>(Keys.getDeveloperListKey(), DeveloperKVStoreKey);\n  }\n\n  // infra related query\n\n  /**\n   * getInfraProvider returns the infra provider info such as usage.\n   *\n   * @param providerName\n   */\n  getInfraProvider(providerName: string): Promise<InfraProvider> {\n    const InfraKVStoreKey = Keys.KVSTOREKEYS.InfraKVStoreKey;\n    return this._transport.query<InfraProvider>(\n      Keys.getInfraProviderKey(providerName),\n      InfraKVStoreKey\n    );\n  }\n\n  /**\n   * getInfraProviders returns a list of all infra providers.\n   */\n  getInfraProviders(): Promise<InfraProviderList> {\n    const InfraKVStoreKey = Keys.KVSTOREKEYS.InfraKVStoreKey;\n    return this._transport.query<InfraProviderList>(\n      Keys.getInfraProviderListKey(),\n      InfraKVStoreKey\n    );\n  }\n\n  // proposal related query\n\n  /**\n   * GetProposalList returns a list of all proposals, including onging\n   * proposals and past ones.\n   */\n  getProposalList(): Promise<ProposalList> {\n    const ProposalKVStoreKey = Keys.KVSTOREKEYS.ProposalKVStoreKey;\n    return this._transport.query<ProposalList>(Keys.getProposalListKey(), ProposalKVStoreKey);\n  }\n\n  /**\n   * getProposal returns proposal info of a specific proposalID.\n   *\n   * @param proposalID\n   */\n  getProposal(proposalID: string): Promise<Proposal> {\n    const ProposalKVStoreKey = Keys.KVSTOREKEYS.ProposalKVStoreKey;\n    return this._transport.query<Proposal>(Keys.getProposalKey(proposalID), ProposalKVStoreKey);\n  }\n\n  /**\n   * getOngoingProposal returns all ongoing proposals.\n   */\n  getOngoingProposal(): Promise<Proposal[]> {\n    return this.getProposalList().then(list =>\n      Promise.all((list.ongoing_proposal || []).map(p => this.getProposal(p)))\n    );\n  }\n\n  /**\n   * getExpiredProposal returns all past proposals.\n   */\n  getExpiredProposal(): Promise<Proposal[]> {\n    return this.getProposalList().then(list =>\n      Promise.all((list.past_proposal || []).map(p => this.getProposal(p)))\n    );\n  }\n\n  /**\n   * getNextProposalID returns the next proposal id\n   */\n  getNextProposalID(): Promise<NextProposalID> {\n    const ProposalKVStoreKey = Keys.KVSTOREKEYS.ProposalKVStoreKey;\n    return this._transport.query<NextProposalID>(Keys.getNextProposalIDKey(), ProposalKVStoreKey);\n  }\n\n  // param related query\n\n  /**\n   * getEvaluateOfContentValueParam returns the EvaluateOfContentValueParam.\n   */\n  getEvaluateOfContentValueParam(): Promise<Types.EvaluateOfContentValueParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.EvaluateOfContentValueParam>(\n      Keys.getEvaluateOfContentValueParamKey(),\n      ParamKVStoreKey\n    );\n  }\n\n  /**\n   * getGlobalAllocationParam returns the GlobalAllocationParam.\n   */\n  getGlobalAllocationParam(): Promise<Types.GlobalAllocationParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.GlobalAllocationParam>(\n      Keys.getGlobalAllocationParamKey(),\n      ParamKVStoreKey\n    );\n  }\n\n  /**\n   * getInfraInternalAllocationParam returns the InfraInternalAllocationParam.\n   */\n  getInfraInternalAllocationParam(): Promise<Types.InfraInternalAllocationParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.InfraInternalAllocationParam>(\n      Keys.getInfraInternalAllocationParamKey(),\n      ParamKVStoreKey\n    );\n  }\n\n  /**\n   * getDeveloperParam returns the DeveloperParam.\n   */\n  getDeveloperParam(): Promise<Types.DeveloperParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.DeveloperParam>(\n      Keys.getDeveloperParamKey(),\n      ParamKVStoreKey\n    );\n  }\n\n  /**\n   * getVoteParam returns the VoteParam.\n   */\n  getVoteParam(): Promise<Types.VoteParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.VoteParam>(Keys.getVoteParamKey(), ParamKVStoreKey);\n  }\n\n  /**\n   * getProposalParam returns the ProposalParam.\n   */\n  getProposalParam(): Promise<Types.ProposalParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.ProposalParam>(Keys.getProposalParamKey(), ParamKVStoreKey);\n  }\n\n  /**\n   * getValidatorParam returns the ValidatorParam.\n   */\n  getValidatorParam(): Promise<Types.ValidatorParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.ValidatorParam>(\n      Keys.getValidatorParamKey(),\n      ParamKVStoreKey\n    );\n  }\n\n  /**\n   * getCoinDayParam returns the CoinDayParam.\n   */\n  getCoinDayParam(): Promise<Types.CoinDayParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.CoinDayParam>(Keys.getCoinDayParamKey(), ParamKVStoreKey);\n  }\n\n  /**\n   * getBandwidthParam returns the BandwidthParam.\n   */\n  getBandwidthParam(): Promise<Types.BandwidthParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.BandwidthParam>(\n      Keys.getBandwidthParamKey(),\n      ParamKVStoreKey\n    );\n  }\n\n  /**\n   * getAccountParam returns the AccountParam.\n   */\n  getAccountParam(): Promise<Types.AccountParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.AccountParam>(Keys.getAccountParamKey(), ParamKVStoreKey);\n  }\n\n  /**\n   * getGlobalMeta returns the GlobalMeta.\n   */\n  getGlobalMeta(): Promise<Types.GlobalMeta> {\n    const GlobalKVStoreKey = Keys.KVSTOREKEYS.GlobalKVStoreKey;\n    return this._transport.query<Types.GlobalMeta>(Keys.getGlobalMetaKey(), GlobalKVStoreKey);\n  }\n\n  /**\n   * getAccountParam returns the AccountParam.\n   */\n  getConsumptionMeta(): Promise<Types.ConsumptionMeta> {\n    const GlobalKVStoreKey = Keys.KVSTOREKEYS.GlobalKVStoreKey;\n    return this._transport.query<Types.ConsumptionMeta>(\n      Keys.getConsumptionMetaKey(),\n      GlobalKVStoreKey\n    );\n  }\n\n  /**\n   * getPostParam returns the PostParam.\n   */\n  getPostParam(): Promise<Types.PostParam> {\n    const ParamKVStoreKey = Keys.KVSTOREKEYS.ParamKVStoreKey;\n    return this._transport.query<Types.PostParam>(Keys.getPostParamKey(), ParamKVStoreKey);\n  }\n\n  // block related\n\n  /**\n   * getBlock returns a block at a certain height from blockchain.\n   *\n   * @param height\n   */\n  getBlock(height: number): Promise<ResultBlock> {\n    return this._transport.block(height);\n  }\n\n  /**\n   * getTxsInBlock returns all transactions in a block at a certain height from blockchain.\n   * @param height\n   */\n  getTxsInBlock(height: number): Promise<StdTx[]> {\n    return this._transport\n      .block(height)\n      .then(\n        v =>\n          v && v.block && v.block.data && v.block.data.txs\n            ? v.block.data.txs.map(tx => JSON.parse(ByteBuffer.atob(tx)))\n            : []\n      );\n  }\n\n  /**\n   * getBalanceHistoryFromTo returns a list of transaction history in the range of [from, to],\n   * that if to is larger than the number of tx, tx will be replaced by the larget tx number,\n   * related to a user's account balance, in reverse-chronological order.\n   *\n   * @param username: user name\n   * @param from: the start index of the balance history, inclusively\n   * @param to: the end index of the balance history, inclusively\n   */\n  async getBalanceHistoryFromTo(\n    username: string,\n    from: number,\n    to: number\n  ): Promise<BalanceHistory> {\n    if (!this.isValidNat(from) || !this.isValidNat(to) || from > to) {\n      throw new Error(`GetBalanceHistoryFromTo: from [${from}] or to [${to}] is invalid`);\n    }\n\n    let accountBank = await this.getAccountBank(username);\n    let rst: BalanceHistory = { details: [] };\n\n    if (accountBank.number_of_transaction == 0) {\n      return rst;\n    }\n\n    let maxTxIndex = accountBank.number_of_transaction - 1;\n\n    if (from > maxTxIndex) {\n      throw new Error(`GetBalanceHistoryFromTo: [${from}] is larger than total num of tx`);\n    }\n    if (to > maxTxIndex) {\n      to = maxTxIndex;\n    }\n\n    // number of banlance history is wanted\n    let numHistory = to - from + 1;\n    let targetBucketOfTo = Math.floor(to / 100);\n    let bucketSlot = targetBucketOfTo;\n\n    // The index of 'to' in the target bucket\n    let indexOfTo = to % 100;\n\n    while (bucketSlot >= 0 && numHistory > 0) {\n      console.log('balance history sending bucketSlot: ', bucketSlot);\n      let history = await this.getBalanceHistoryBundle(username, bucketSlot);\n      let startIndex = bucketSlot == targetBucketOfTo ? indexOfTo : history.details.length - 1;\n\n      for (let i = startIndex; i >= 0 && numHistory > 0; i--) {\n        rst.details.push(history.details[i]);\n        numHistory--;\n      }\n      bucketSlot--;\n    }\n\n    return rst;\n  }\n\n  /**\n   * getRecentBalanceHistory returns a certain number of recent transaction history\n   * related to a user's account balance, in reverse-chronological order.\n   *\n   * @param username: user name\n   * @param numHistory: the number of balance history are wanted\n   */\n  async getRecentBalanceHistory(username: string, numHistory: number): Promise<BalanceHistory> {\n    if (!this.isValidNat(numHistory)) {\n      throw new Error(`GetRecentBalanceHistory: numHistory is invalid: ${numHistory}`);\n    }\n    let accountBank = await this.getAccountBank(username);\n    let maxTxNo = accountBank.number_of_transaction - 1;\n\n    let from = Math.max(0, maxTxNo - numHistory + 1);\n    if (numHistory > accountBank.number_of_transaction) {\n      from = 0;\n    }\n\n    return this.getBalanceHistoryFromTo(username, from, maxTxNo);\n  }\n\n  /**\n   * getRewardHistoryFromTo returns a list of reward history in the range of [from, to],\n   * that if to is larger than the number of tx, tx will be replaced by the largest tx number,\n   * related to a user's posts rewards, in reverse-chronological order.\n   *\n   * @param username: user name\n   * @param from: the start index of the reward history, inclusively\n   * @param to: the end index of the reward history, inclusively\n   */\n  async getRewardHistoryFromTo(username: string, from: number, to: number): Promise<RewardHistory> {\n    if (!this.isValidNat(from) || !this.isValidNat(to) || from > to) {\n      throw new Error(`getRewardHistoryFromTo: from [${from}] or to [${to}] is invalid`);\n    }\n\n    let accountBank = await this.getAccountBank(username);\n    let rst: RewardHistory = { details: [] };\n\n    if (accountBank.number_of_reward == 0) {\n      return rst;\n    }\n\n    let maxRewardIndex = accountBank.number_of_reward - 1;\n\n    if (from > maxRewardIndex) {\n      throw new Error(`getRewardHistoryFromTo: [${from}] is larger than total num of reward`);\n    }\n    if (to > maxRewardIndex) {\n      to = maxRewardIndex;\n    }\n\n    // number of reward history is wanted\n    let numReward = to - from + 1;\n    let targetBucketOfTo = Math.floor(to / 100);\n    let bucketSlot = targetBucketOfTo;\n\n    // The index of 'to' in the target bucket\n    let indexOfTo = to % 100;\n\n    while (bucketSlot >= 0 && numReward > 0) {\n      console.log('reward history sending bucketSlot: ', bucketSlot);\n      let history = await this.getRewardHistoryBundle(username, bucketSlot);\n      let startIndex = bucketSlot == targetBucketOfTo ? indexOfTo : history.details.length - 1;\n\n      for (let i = startIndex; i >= 0 && numReward > 0; i--) {\n        rst.details.push(history.details[i]);\n        numReward--;\n      }\n      bucketSlot--;\n    }\n\n    return rst;\n  }\n\n  /**\n   * getRecentRewardHistory returns a certain number of recent reward history\n   * related to a user's posts reward, in reverse-chronological order.\n   *\n   * @param username: user name\n   * @param numReward: the number of reward history are wanted\n   */\n  async getRecentRewardHistory(username: string, numReward: number): Promise<RewardHistory> {\n    if (!this.isValidNat(numReward)) {\n      throw new Error(`getRecentRewardHistory: numReward is invalid: ${numReward}`);\n    }\n    let accountBank = await this.getAccountBank(username);\n    let maxTxNo = accountBank.number_of_reward - 1;\n\n    let from = Math.max(0, maxTxNo - numReward + 1);\n    if (numReward > accountBank.number_of_reward) {\n      from = 0;\n    }\n\n    return this.getRewardHistoryFromTo(username, from, maxTxNo);\n  }\n\n  // @return false negative or larger than safe int.\n  isValidNat(num: number): boolean {\n    // XXX(yumin): js's MAX_SAFE_INTEGER is less than 2^64.\n    // TODO(yumin): use bigint to support large seq number.\n    if (num < 0 || num > Number.MAX_SAFE_INTEGER) {\n      return false;\n    }\n    return true;\n  }\n}\n\n// validator related struct\nexport interface PubKey {\n  type: string;\n  data: string;\n}\n\nexport interface ABCIValidator {\n  address: string;\n  pub_key: PubKey;\n  power: number;\n}\n\nexport interface Validator {\n  abci: ABCIValidator;\n  username: string;\n  deposit: Types.Coin;\n  absent_commit: number;\n  byzantine_commit: number;\n  produced_blocks: number;\n  link: string;\n}\n\nexport interface AllValidators {\n  oncall_validators: string[];\n  all_validators: string[];\n  pre_block_validators: string[];\n  lowest_power: Types.Coin;\n  lowest_validator: string;\n}\n\n// vote related struct\nexport interface Voter {\n  username: string;\n  deposit: Types.Coin;\n  delegated_power: Types.Coin;\n}\n\nexport interface Vote {\n  voter: string;\n  voting_power: Types.Coin;\n  result: boolean;\n}\n\nexport interface Delegation {\n  delegator: string;\n  amount: Types.Coin;\n}\n\n// post related\nexport interface Comment {\n  author: string;\n  post_key: string;\n  created: number;\n}\n\nexport interface View {\n  username: string;\n  last_view_at: number;\n  times: number;\n}\n\nexport interface Like {\n  username: string;\n  weight: number;\n  created_at: number;\n}\n\nexport interface Donation {\n  amount: Types.Coin;\n  created: number;\n  donation_type: number;\n}\n\nexport interface Donations {\n  username: string;\n  donation_list: Donation[];\n}\n\nexport interface ReportOrUpvote {\n  username: string;\n  stake: Types.Coin;\n  created_at: number;\n  is_report: boolean;\n}\n\nexport interface PostInfo {\n  post_id: string;\n  title: string;\n  content: string;\n  author: string;\n  parent_author: string;\n  parent_postID: string;\n  source_author: string;\n  source_postID: string;\n  links: Types.IDToURLMapping[];\n}\n\nexport interface PostMeta {\n  created_at: number;\n  last_updated_at: number;\n  last_activity_at: number;\n  allow_replies: boolean;\n  is_deleted: boolean;\n  total_like_count: number;\n  total_donate_count: number;\n  total_like_weight: number;\n  total_dislike_weight: number;\n  total_report_stake: Types.Coin;\n  total_upvote_stake: Types.Coin;\n  total_view_count: number;\n  total_reward: Types.Coin;\n  redistribution_split_rate: Types.Rat;\n}\n\n// developer related\nexport interface Developer {\n  username: string;\n  deposit: Types.Coin;\n  app_consumption: Types.Coin;\n  website: string;\n  description: string;\n  app_meta_data: string;\n}\n\nexport interface DeveloperList {\n  all_developers: string[];\n}\n\n// infra provider related\nexport interface InfraProvider {\n  username: string;\n  usage: number;\n}\n\nexport interface InfraProviderList {\n  all_infra_providers: string[];\n}\n\n// account related\nexport interface AccountInfo {\n  username: string;\n  created_at: number;\n  master_key: string;\n  transaction_key: string;\n  micropayment_key: string;\n  post_key: string;\n}\n\nexport interface AccountBank {\n  saving: Types.Coin;\n  stake: Types.Coin;\n  frozen_money_list: FrozenMoney[];\n  number_of_transaction: number;\n  number_of_reward: number;\n}\n\nexport interface FrozenMoney {\n  amount: Types.Coin;\n  start_at: number;\n  times: number;\n  interval: number;\n}\n\nexport interface GrantPubKey {\n  username: string;\n  permission: number;\n  left_times: number;\n  created_at: number;\n  expires_at: number;\n}\n\nexport interface AccountMeta {\n  sequence: number;\n  last_activity_at: number;\n  transaction_capacity: Types.Coin;\n  json_meta: string;\n  last_report_or_upvote_at: number;\n}\n\nexport interface FollowerMeta {\n  created_at: number;\n  follower_name: string;\n}\n\nexport interface FollowingMeta {\n  created_at: number;\n  following_name: string;\n}\n\nexport interface Reward {\n  original_income: Types.Coin;\n  friction_income: Types.Coin;\n  actual_reward: Types.Coin;\n  unclaim_reward: Types.Coin;\n}\n\nexport interface RewardDetail {\n  original_income: Types.Coin;\n  friction_income: Types.Coin;\n  actual_reward: Types.Coin;\n  consumer: string;\n  post_author: string;\n  post_id: string;\n}\n\nexport interface RewardHistory {\n  details: RewardDetail[];\n}\n\nexport interface Relationship {\n  donation_times: number;\n}\n\nexport interface RangeQueryResult<T> {\n  key: string;\n  result: T;\n}\n\nexport interface BalanceHistory {\n  details: Detail[];\n}\n\nexport interface Detail {\n  detail_type: number;\n  from: string;\n  to: string;\n  amount: Types.Coin;\n  created_at: number;\n  memo: string;\n}\n\n// proposal related\nexport interface ProposalList {\n  ongoing_proposal?: string[];\n  past_proposal?: string[];\n}\n\nexport interface ProposalInfo {\n  creator: string;\n  proposal_id: string;\n  agree_vote: Types.Coin;\n  disagree_vote: Types.Coin;\n  result: number;\n  created_at: number;\n  expired_at: number;\n}\n\nexport interface NextProposalID {\n  next_proposal_id: number;\n}\n\nexport interface Proposal {\n  type: string;\n  value: ProposalValue;\n}\n\nexport interface ProposalValue {\n  ProposalInfo: ProposalInfo;\n  [propName: string]: any;\n}\n\nexport interface ChangeParamProposalValue extends ProposalValue {\n  param: Types.Parameter;\n}\nexport function isChangeParamProposalValue(\n  value: ProposalValue\n): value is ChangeParamProposalValue {\n  return 'param' in value;\n}\n\nexport interface ContentCensorshipProposalValue extends ProposalValue {\n  permLink: string;\n  reason: string;\n}\nexport function isContentCensorshipProposalValue(\n  value: ProposalValue\n): value is ContentCensorshipProposalValue {\n  return 'permLink' in value && 'reason' in value;\n}\n\nexport interface ProtocolUpgradeProposalValue extends ProposalValue {\n  link: string;\n}\nexport function isProtocolUpgradeProposalValue(\n  value: ProposalValue\n): value is ProtocolUpgradeProposalValue {\n  return 'link' in value;\n}\n\n// tx detail type\nexport const DETAILTYPE = {\n  // Different possible incomes\n  TransferIn: 0,\n  DonationIn: 1,\n  ClaimReward: 2,\n  ValidatorInflation: 3,\n  DeveloperInflation: 4,\n  InfraInflation: 5,\n  VoteReturnCoin: 6,\n  DelegationReturnCoin: 7,\n  ValidatorReturnCoin: 8,\n  DeveloperReturnCoin: 9,\n  InfraReturnCoin: 10,\n  ProposalReturnCoin: 11,\n  GenesisCoin: 12,\n  // Different possible outcomes\n  TransferOut: 13,\n  DonationOut: 14,\n  Delegate: 15,\n  VoterDeposit: 16,\n  ValidatorDeposit: 17,\n  DeveloperDeposit: 18,\n  InfraDeposit: 19,\n  ProposalDeposit: 20\n};\n\nconst _TIMECONST = {\n  HoursPerYear: 8766,\n  MinutesPerYear: 8766 * 60,\n  MinutesPerMonth: (8766 * 60) / 12,\n  BalanceHistoryIntervalTime: ((8766 * 60) / 12) * 60\n};\n\n// internally used\ninterface AccountInfoInternal {\n  username: string;\n  created_at: number;\n  master_key: InternalPubKey;\n  transaction_key: InternalPubKey;\n  micropayment_key: InternalPubKey;\n  post_key: InternalPubKey;\n}\n","import Broadcast from './broadcast';\nimport Query from './query';\nimport { ITransport, ITransportOptions, Transport } from './transport';\n\nexport class LINO {\n  private _options: ITransportOptions;\n  private _transport: ITransport;\n  private _query: Query;\n  private _broadcast: Broadcast;\n\n  constructor(opt: ITransportOptions) {\n    this._options = opt;\n    this._transport = new Transport(opt);\n    this._query = new Query(this._transport);\n    this._broadcast = new Broadcast(this._transport);\n  }\n\n  get query(): Query {\n    return this._query;\n  }\n\n  get broadcast(): Broadcast {\n    return this._broadcast;\n  }\n}\n","//Common Type defination\nexport interface Coin {\n  amount: Int128;\n}\n\nexport interface SDKCoin {\n  denom: string;\n  amount: number;\n}\n\nexport interface Int128 {\n  Lo: number;\n  Hi: number;\n}\n\nexport interface MathInt {\n  neg: boolean;\n  abs: number[];\n}\n\nexport interface MathRat {\n  a: MathInt;\n  b: MathInt;\n}\n\nexport interface Rat {\n  rat: MathRat;\n}\n\nexport interface IDToURLMapping {\n  identifier: string;\n  url: string;\n}\n\nexport interface Parameter {\n  type: string;\n  value: object;\n}\n\nexport interface EvaluateOfContentValueParam {\n  consumption_time_adjust_base: number;\n  consumption_time_adjust_offset: number;\n  num_of_consumption_on_author_offset: number;\n  total_amount_of_consumption_base: number;\n  total_amount_of_consumption_offset: number;\n  amount_of_consumption_exponent: Rat;\n}\nexport function isEvaluateOfContentValueParam(param: object): param is EvaluateOfContentValueParam {\n  return (\n    'consumption_time_adjust_base' in param &&\n    'consumption_time_adjust_offset' in param &&\n    'num_of_consumption_on_author_offset' in param &&\n    'total_amount_of_consumption_base' in param &&\n    'total_amount_of_consumption_offset' in param &&\n    'amount_of_consumption_exponent' in param\n  );\n}\n\nexport interface GlobalAllocationParam {\n  infra_allocation: Rat;\n  content_creator_allocation: Rat;\n  developer_allocation: Rat;\n  validator_allocation: Rat;\n}\nexport function isGlobalAllocationParam(param: object): param is GlobalAllocationParam {\n  return (\n    'infra_allocation' in param &&\n    'content_creator_allocation' in param &&\n    'developer_allocation' in param &&\n    'validator_allocation' in param\n  );\n}\n\nexport interface InfraInternalAllocationParam {\n  storage_allocation: Rat;\n  CDN_allocation: Rat;\n}\nexport function isInfraInternalAllocationParam(\n  param: object\n): param is InfraInternalAllocationParam {\n  return 'storage_allocation' in param && 'CDN_allocation' in param;\n}\n\nexport interface VoteParam {\n  voter_min_deposit: Coin;\n  voter_min_withdraw: Coin;\n  delegator_min_withdraw: Coin;\n  voter_coin_return_interval: number;\n  voter_coin_return_times: number;\n  delegator_coin_return_interval: number;\n  delegator_coin_return_times: number;\n}\nexport function isVoteParam(param: object): param is VoteParam {\n  return (\n    'voter_min_deposit' in param &&\n    'voter_min_withdraw' in param &&\n    'delegator_min_withdraw' in param &&\n    'voter_coin_return_interval' in param &&\n    'voter_coin_return_times' in param &&\n    'delegator_coin_return_interval' in param &&\n    'delegator_coin_return_times' in param\n  );\n}\n\nexport interface ProposalParam {\n  content_censorship_decide_hr: number;\n  content_censorship_min_deposit: Coin;\n  content_censorship_pass_ratio: Rat;\n  content_censorship_pass_votes: Coin;\n  change_param_decide_hr: number;\n  change_param_min_deposit: Coin;\n  change_param_pass_ratio: Rat;\n  change_param_pass_votes: Coin;\n  protocol_upgrade_decide_hr: number;\n  protocol_upgrade_min_deposit: Coin;\n  protocol_upgrade_pass_ratio: Rat;\n  protocol_upgrade_pass_votes: Coin;\n}\nexport function isProposalParam(param: object): param is ProposalParam {\n  return (\n    'content_censorship_decide_hr' in param &&\n    'content_censorship_min_deposit' in param &&\n    'content_censorship_pass_ratio' in param &&\n    'content_censorship_pass_votes' in param &&\n    'change_param_decide_hr' in param &&\n    'change_param_min_deposit' in param &&\n    'change_param_pass_ratio' in param &&\n    'change_param_pass_votes' in param &&\n    'protocol_upgrade_decide_hr' in param &&\n    'protocol_upgrade_min_deposit' in param &&\n    'protocol_upgrade_pass_ratio' in param &&\n    'protocol_upgrade_pass_votes' in param\n  );\n}\n\nexport interface DeveloperParam {\n  developer_min_deposit: Coin;\n  developer_coin_return_interval: number;\n  developer_coin_return_times: number;\n}\nexport function isDeveloperParam(param: object): param is DeveloperParam {\n  return (\n    'developer_min_deposit' in param &&\n    'developer_coin_return_interval' in param &&\n    'developer_coin_return_times' in param\n  );\n}\n\nexport interface ValidatorParam {\n  validator_min_withdraw: Coin;\n  validator_min_voting_deposit: Coin;\n  validator_min_commiting_deposit: Coin;\n  validator_coin_return_interval: number;\n  validator_coin_return_times: number;\n  penalty_miss_vote: Coin;\n  penalty_miss_commit: Coin;\n  penalty_byzantine: Coin;\n  validator_list_size: number;\n  absent_commit_limitation: number;\n}\nexport function isValidatorParam(param: object): param is ValidatorParam {\n  return (\n    'validator_min_withdraw' in param &&\n    'validator_min_voting_deposit' in param &&\n    'validator_min_commiting_deposit' in param &&\n    'validator_coin_return_interval' in param &&\n    'validator_coin_return_times' in param &&\n    'penalty_miss_vote' in param &&\n    'penalty_miss_commit' in param &&\n    'penalty_byzantine' in param &&\n    'validator_list_size' in param &&\n    'absent_commit_limitation' in param\n  );\n}\n\nexport interface CoinDayParam {\n  days_to_recover_coin_day_stake: number;\n  seconds_to_recover_coin_day_stake: number;\n}\nexport function isCoinDayParam(param: object): param is CoinDayParam {\n  return 'days_to_recover_coin_day_stake' in param && 'seconds_to_recover_coin_day_stake' in param;\n}\n\nexport interface BandwidthParam {\n  seconds_to_recover_bandwidth: number;\n  capacity_usage_per_transaction: Coin;\n  balance_history_bundle_size: number;\n  maximum_micropayment_grant_times: number;\n  reward_history_bundle_size: number;\n}\nexport function isBandwidthParam(param: object): param is BandwidthParam {\n  return (\n    'seconds_to_recover_bandwidth' in param &&\n    'capacity_usage_per_transaction' in param &&\n    'balance_history_bundle_size' in param &&\n    'maximum_micropayment_grant_times' in param &&\n    'reward_history_bundle_size' in param\n  );\n}\n\nexport interface AccountParam {\n  minimum_balance: Coin;\n  register_fee: Coin;\n  balance_history_bundle_size: number;\n  maximum_micropayment_grant_times: number;\n  reward_history_bundle_size: number;\n}\nexport function isAccountParam(param: object): param is AccountParam {\n  return (\n    'minimum_balance' in param &&\n    'register_fee' in param &&\n    'balance_history_bundle_size' in param &&\n    'maximum_micropayment_grant_times' in param &&\n    'reward_history_bundle_size' in param\n  );\n}\n\nexport interface PostParam {\n  micropayment_limitation: Coin;\n  report_or_upvote_interval: number;\n}\nexport function isPostParam(param: object): param is PostParam {\n  return 'micropayment_limitation' in param && 'report_or_upvote_interval' in param;\n}\n\nexport interface GlobalMeta {\n  total_lino_coin: Coin;\n  last_year_cumulative_consumption: Coin;\n  cumulative_consumption: Coin;\n  growth_rate: Rat;\n  ceiling: Rat;\n  Floor: Rat;\n}\n\nexport interface ConsumptionMeta {\n  consumption_friction_rate: Rat;\n  ConsumptionWindow: Coin;\n  ConsumptionRewardPool: Coin;\n  consumption_freezing_period: number;\n}\n"],"names":["GetKeyBy","Keys","EC","BroadCastErrorEnum","Util.isKeyMatch"],"mappings":"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"}